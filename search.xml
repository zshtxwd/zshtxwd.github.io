<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【前端人python学习日记】基础语法【三】</title>
      <link href="/posts/2023902d.html"/>
      <url>/posts/2023902d.html</url>
      
        <content type="html"><![CDATA[<h4 id="文件操作">文件操作</h4><h5 id="操作文件的步骤">操作文件的步骤</h5><ul><li><p>打开</p></li><li><p>读写</p></li><li><p>关闭</p></li></ul><h5 id="open-打开函数">open()打开函数</h5><p><code>open(name，mode，encoding)</code></p><p>三个<strong>常用参数</strong>，<strong>encodeing</strong>其实是<strong>第四个</strong>参数，所以我们用<strong>关键字传参</strong>，而不是位置传参</p><p><code>f=open(&quot;D:/测试.txt&quot;,&quot;r&quot;,encoding=&quot;UTF-8&quot;)</code></p><p>​<strong>name</strong>要打开的目标文件名的字符串(可以包含目标文件的具体路径)</p><p>​<strong>mode</strong>设置文件的访问模式(<strong>只读</strong>，<strong>写入</strong>，<strong>追加</strong>)</p><p>​<strong>encoding</strong>编码格式，推荐使用<strong>UTF-8</strong></p><p><strong>mode</strong>常用的三种访问模式</p><p><img src="https://imgbed.zshlmy.love/Typora/image-20230901220551881.png" alt="image-20230901220551881"></p><h5 id="读操作的相关方法">读操作的相关方法</h5><ul><li><strong>文件对象.read(num)</strong></li></ul><p>读取文件内容，<strong>num</strong>为读取文件的字节数，不传入<strong>num</strong>则读取所有数据</p><ul><li><strong>文件对象.readlines()方法</strong></li></ul><p>readlines可以按照<strong>行</strong>的方式，把<strong>整个文件内容</strong>一次性读取，返回一个<strong>列表</strong>，<strong>每一行数据为一个元素</strong></p><ul><li><strong>文件对象.readline()方法</strong></li></ul><p>readlines可以按照<strong>行</strong>的方式，<strong>一行一行</strong>的读取文件内容</p><hr><p>在程序中连续调用两次<code>read</code>，第一次读取的结尾会被记录下来</p><p>第二次调用<code>read</code>的时候，会从<strong>第一次的结尾</strong>继续读</p><p>在<strong>读文件</strong>的时候，只要文件打开，不管调用什么方法，文件都会从<strong>上一次读的结束位置继续开始</strong></p><hr><p>可以使用for一行一行的遍历文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;r&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><h5 id="close-关闭函数">close()关闭函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>通过close关闭文件，如果不使用close关闭文件，并且<strong>不结束程序</strong>，那么python会一直<strong>占用该文件</strong></p><h5 id="with-open语法">with open语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.read()</span><br></pre></td></tr></table></figure><p>通过<strong>with open</strong>操作文件，可以在操作完成后<strong>自动调用close</strong>进行关闭</p><h5 id="基本写操作">基本写操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="comment">#将内容写入内存中</span></span><br><span class="line">f.flush()</span><br><span class="line"><span class="comment">#将内存中的内容刷到硬盘上</span></span><br></pre></td></tr></table></figure><p><strong>write</strong>并<strong>没有完成文件写入</strong>的操作，只是<strong>将内容暂时存到内存中</strong>，等<strong>flush</strong>执行时将<strong>内存</strong>中的内容<strong>统一写入</strong>硬盘</p><p>这样的好处是<strong>不需要频繁操作硬盘导致效率下降</strong></p><p>前端OS：这让我想到vue框架，收集dom操作，最后统一渲染到页面上去，这样就提高了效率和资源损耗，也让我想到了使用canvas画板，在画完东西之后，需要执行stroke()才能真正画出东西</p><h5 id="基本追加操作">基本追加操作</h5><p>不会像w一样覆盖原有内容，而是在原有内容后面接着写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="comment">#将内容写入内存中</span></span><br><span class="line">f.flush()</span><br><span class="line"><span class="comment">#将内存中的内容刷到硬盘上</span></span><br></pre></td></tr></table></figure><p><strong>write</strong>并<strong>没有完成文件写入</strong>的操作，只是<strong>将内容暂时存到内存中</strong>，等<strong>flush</strong>执行时将<strong>内存</strong>中的内容<strong>统一写入</strong>硬盘</p><h4 id="异常">异常</h4><p>这还用我解释？</p><p><strong>遇到bug的两种处理方式</strong></p><ul><li>不去理会，程序崩溃终止运行</li><li>对bug进行处理，程序继续运行</li></ul><h5 id="捕获异常">捕获异常</h5><ul><li>捕获常规异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现异常的操作</span><br></pre></td></tr></table></figure><ul><li>捕获指定类型异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出现了变量未定义的异常&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>捕获多个异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> (NameError,ZeroDivisionError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出现了变量未定义异常 或者 出现了除零异常&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>捕获所有异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出现了异常&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现异常的操作</span><br></pre></td></tr></table></figure><h5 id="异常的else和finally语法">异常的else和finally语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    异常处理</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没出现异常的情况</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    无论是否出现异常都会执行</span><br></pre></td></tr></table></figure><p>前端OS：这finally好像promise的finally啊</p><h5 id="异常的传递性">异常的传递性</h5><p>当函数func01中发生异常，并且没有捕获处理这个异常的时候，异常会传递到函数func02，当func02也没有捕获处理这个异常的时候main函数会捕获这个异常，这就是异常的传递性</p><p>前端OS：连续使用promise，可以在最后使用catch统一捕获错误</p><p><img src="https://imgbed.zshlmy.love/Typora/image-20230901235313885.png" alt="image-20230901235313885"></p><h4 id="模块Module">模块Module</h4><p>前端OS：没必要解释，懂的都懂</p><h5 id="模块的导入">模块的导入</h5><p><strong><code>[from 模块名] import [模块|类|变量|函数|*] [as 别名]</code></strong></p><p><code>from</code>和<code>as</code>可以不写</p><h5 id="自定义模块">自定义模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plus</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前文件</span></span><br><span class="line"><span class="keyword">import</span> test</span><br><span class="line">test.plus(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>自定义模块的模块名，就是py文件名</p><p>引入同名的模块，类，变量，函数，后面引入的会覆盖前面引入的</p><h5 id="mian">__mian__</h5><p>只有在自己原本的文件中<code>__name__==&quot;__mian__&quot;</code>，这样可以在自定义模块中测试，又不用担心在引入模块时函数就调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plus</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__mian__&quot;</span>:</span><br><span class="line">    plus(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="all">__all__</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;test_A&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_A</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_B</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#这里使用*</span></span><br><span class="line"><span class="comment">#如果没有写__all__，那么引入所有内容</span></span><br><span class="line"><span class="comment">#如果写了__all__，那么只引入__all__中准备的内容</span></span><br></pre></td></tr></table></figure><h5 id="自定义包">自定义包</h5><p>只有文件夹里有**__init__.py<strong>文件，才被称之为</strong>包**</p><p>__init__.py文件可以<strong>没有内容</strong>，但<strong>必须存在</strong></p><p>__init__.py文件里会写__all__的配置</p><h5 id="第三方包安装">第三方包安装</h5><p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名称</code></p><p>在<strong>pip</strong>中使用清华大学提供的镜像下载第三方包</p><h4 id="JSON">JSON</h4><p>JSON数据格式用于在各种编程语言之间传递数据</p><p>前端OS：我可太熟悉了，我说怎么字典第一眼看上去这么眼熟，原来就是JSON</p><p><code>JSON</code>和<code>python</code>中的<strong>字典</strong>，<strong>列表嵌套字典</strong>可以无缝切换，不能说相似吧，只能说是一模一样</p><h5 id="JSON数据转化">JSON数据转化</h5><p>将JSON数据与python数据之间互相转化</p><p>前端OS：是不是<code>JSON.stringfly</code>和<code>JSON.parse</code>啊？</p><ul><li>引入JSON库</li></ul><p><code>import json</code></p><ul><li>python数据转化成JSON数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data=[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;]</span><br><span class="line"></span><br><span class="line">data=json.dumps(data)</span><br><span class="line"><span class="comment">#将python数据转为JSON字符串</span></span><br><span class="line"></span><br><span class="line">data=json.loads(data)</span><br><span class="line"><span class="comment">#将JSON字符串转为python数据</span></span><br></pre></td></tr></table></figure><p>中文转换时会有编码问题，我们可以设置**<code>ensure_ascii=False</code>**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data=[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;]</span><br><span class="line"></span><br><span class="line">data=json.dumps(data,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#将python转为JSON</span></span><br><span class="line"><span class="comment">#设置ensure_ascii=False的意思是不使用ascii来转换他，把内容直接输出出去</span></span><br><span class="line"><span class="comment">#如果不设置，那么中文就会变成unicode字符</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端人python学习日记】基础语法【二】</title>
      <link href="/posts/2023901d.html"/>
      <url>/posts/2023901d.html</url>
      
        <content type="html"><![CDATA[<h3 id="数据容器">数据容器</h3><p>根据特点不同</p><ul><li>是否允许元素重复</li><li>是否可以修改</li><li>是否有序</li></ul><p>等，可以分为5类列表<code>list</code>、元组<code>tuple</code>、字符串<code>str</code>、集合<code>set</code>、字典<code>dict</code></p><h4 id="列表List">列表List</h4><p>前端OS:中括号，能用索引下标取，是数组！！！</p><h5 id="字面量">字面量</h5><p><code>[元素1，元素2，元素3，元素4]</code></p><h5 id="定义变量">定义变量</h5><p><code>变量名称=[元素1，元素2，元素3，元素4]</code></p><h5 id="定义空列表">定义空列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名称=[]</span><br><span class="line">变量名称=<span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><h5 id="数据类型">数据类型</h5><p>使用<code>type</code>输出类型，结果为<code>&lt;class 'list'&gt;</code></p><h5 id="下标索引">下标索引</h5><p>长度为n的列表</p><p>正向第一个元素下标是<code>0</code>，最后一个元素下标是<code>n-1</code></p><p>反向第一个元素下标是<code>-1</code>，最后一个元素(也就是第一个元素)，索引值是<code>-n</code></p><p><strong>下标索引取值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myList=[<span class="string">&quot;hello&quot;</span>,<span class="number">69</span>,<span class="number">13.14</span>,[<span class="number">36</span>,<span class="string">&quot;world&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(myList[-<span class="number">2</span>])   <span class="comment">#13.14</span></span><br><span class="line"><span class="built_in">print</span>(myList[<span class="number">0</span>])    <span class="comment">#&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(myList[<span class="number">3</span>][<span class="number">1</span>]) <span class="comment">#world</span></span><br></pre></td></tr></table></figure><h5 id="列表操作">列表操作</h5><p><strong>查找元素</strong></p><p><code>列表.index(目标元素)</code>index会返回<strong>目标元素</strong>的下标</p><p>如果查找的元素不存在会<strong>报错</strong></p><p>前端OS:<code>js</code>的<code>index</code>如果元素不存在会返回<code>-1</code>，但是python中<code>-1</code>也是索引，指的是最后一个元素</p><p><strong>插入元素</strong></p><p><code>列表.insert(插入位置,要插入的元素)</code>例如<code>myList.insert(1,&quot;python&quot;)</code></p><p>在索引值为1的地方插入’python’，本来在索引值为1的元素会<strong>往后移动</strong></p><p>​<strong>如果插入的位置索引超出列表的长度会报错</strong></p><p><strong>追加元素</strong></p><ul><li>单个元素</li></ul><p>​<code>列表.append(目标元素)</code>将<strong>目标元素</strong>添加到列表尾部</p><ul><li>多个元素</li></ul><p>​<code>列表.extend(其他元素容器)</code>将<strong>其他元素容器</strong>的内容取出，依次添加到列表尾部</p><p>​<code>[0,1,2].extend([3,4,5])</code>会把<code>[0,1,2]</code>这个数组变成<code>[0,1,2,3,4,5]</code></p><p><strong>删除元素</strong></p><ul><li><code>del</code>关键字</li></ul><p>​<code>del 目标列表[索引]</code></p><ul><li><code>pop</code>方法</li></ul><p>​<code>目标列表.pop(索引)</code></p><p>​实际上是取出列表中的某个元素，这个方法的返回值是被取出的元素</p><p><strong>清空列表</strong></p><p><code>列表.clear()</code>例如<code>myList.clear()</code></p><p><strong>修改元素</strong></p><ul><li>修改特定位置的元素(重新赋值)</li></ul><p>​<code>列表[索引]=要修改的值</code>例如<code>myList[2]=&quot;python&quot;</code></p><ul><li>删除某个元素在列表中的<strong>第一个匹配项</strong></li></ul><p>​<code>列表.remove(元素)</code>例如<code>myList[2]=&quot;python&quot;</code></p><p><strong>统计元素个数</strong></p><p><code>列表.count(目标元素)</code>统计<strong>目标元素</strong>在列表中的个数</p><p><strong>列表长度</strong></p><p><code>len(列表)</code>统计列表中的元素个数</p><p><img src="https://imgbed.zshlmy.love/Typora/image-20230828000709418.png" alt="image-20230828000709418"></p><h4 id="元组Tuple">元组Tuple</h4><p>一个只读的list，可以储存多种类型的数据，修改其中的元素会报错，但列表作为元组的一个元素，列表内部的值是可以改变的</p><p>前端OS:一个不能操作的数组，尤其是作为元组元素的列表内部的值是可以改变的，简直像是const arr=[[1,2,3],4,5,“hello”]</p><h5 id="字面量-2">字面量</h5><p><code>(元素1，元素2，元素3，元素4)</code></p><h5 id="定义变量-2">定义变量</h5><p><code>变量名称=(元素1，元素2，元素3，元素4)</code></p><h5 id="定义空元组">定义空元组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名称=()</span><br><span class="line">变量名称=<span class="built_in">tuple</span>()</span><br></pre></td></tr></table></figure><h5 id="数据类型-2">数据类型</h5><p>使用<code>type</code>输出类型，结果为<code>&lt;class 'tuple'&gt;</code></p><h5 id="下标索引-2">下标索引</h5><p><strong>同<code>list</code></strong></p><h5 id="元组操作">元组操作</h5><p>只支持**<code>index</code>,<code>len()</code>,<code>count()</code><strong>，且使用方法</strong>同<code>list</code>**</p><p><img src="https://imgbed.zshlmy.love/Typora/image-20230828002848175.png" alt="image-20230828002848175"></p><h4 id="字符串String">字符串String</h4><p>前端OS：这就是字符串，嗯</p><h5 id="定义变量-3">定义变量</h5><p><code>str=&quot;hello world&quot;</code></p><h5 id="下标索引-3">下标索引</h5><p>可以使用下标索引取值，<code>js</code>中也可以，但我很少去用</p><h5 id="字符串操作">字符串操作</h5><p><img src="https://imgbed.zshlmy.love/Typora/image-20230831215523354.png" alt="image-20230831215523354"></p><h4 id="序列">序列</h4><p><strong>序列支持切片</strong></p><p><strong>列表，元组，字符串，均支持切片操作</strong></p><p><strong>语法:<code>序列[开始位置:结束位置:步长]</code></strong></p><p>可以<strong>参数不传</strong>，默认值开始位置为<strong>数据容器起点</strong>，结束位置为<strong>数据容器终点</strong>，步长默认为<strong>1</strong></p><p>切片的起始位置默认为 0，即第一个元素的索引为 0。切片操作<strong>包括起点</strong>，但<strong>不包括终点</strong></p><h4 id="集合set">集合set</h4><p><strong><code>列表</code><strong>支持</strong>修改</strong>，支持<strong>重复元素</strong>，<strong>有序</strong></p><p><strong><code>字符串</code></strong>，<strong><code>元组</code></strong> <strong>不支持修改</strong>，支持<strong>重复元素</strong>，<strong>有序</strong></p><p><strong><code>集合</code><strong>最大的特点，<strong>不支持重复元素</strong>，<strong>无序</strong>(无序就说明，不支持下标索引访问)，允许</strong>修改</strong></p><p>前端OS：出现了！集合！！！</p><h5 id="定义集合">定义集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test=&#123;<span class="string">&quot;string&quot;</span>,<span class="string">&quot;list&quot;</span>,<span class="string">&quot;tuple&quot;</span>,<span class="string">&quot;set&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;set&quot;</span>&#125;</span><br><span class="line"><span class="comment">#输出test</span></span><br><span class="line"><span class="comment">#&#123;&quot;string&quot;,&quot;list&quot;,&quot;tuple&quot;,&quot;set&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>定义时元素可以重复</p><p>输出时自动去重</p><h5 id="集合操作">集合操作</h5><h5 id="集合遍历">集合遍历</h5><p>因为<strong>不支持下标索引</strong>所以<strong>不能使用while遍历</strong></p><p>但可以使用<strong>for遍历</strong></p><p><img src="https://imgbed.zshlmy.love/Typora/image-20230831223236393.png" alt="image-20230831223236393"></p><h4 id="字典">字典</h4><p>不支持下标索引，<strong>无序</strong>，<strong>key不可重复</strong></p><p>使用花括号<code>&#123;&#125;</code>，储存键值对<code>key:value</code></p><p>前端OS：我觉得是js里最好用的数据容器了</p><h5 id="定义字典">定义字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;&#125;</span><br><span class="line">dict2=<span class="built_in">dict</span>()</span><br><span class="line">dict3=&#123;<span class="string">&quot;周杰伦&quot;</span>:<span class="number">100</span>,<span class="string">&quot;扁嘴伦&quot;</span>:<span class="number">102</span>,<span class="string">&quot;郭艾伦&quot;</span>:<span class="number">98</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>不允许key重复</strong>，同名的key，后面的会<strong>覆盖</strong>前面的</p><h5 id="字典取值">字典取值</h5><p><code>number=dict3[&quot;扁嘴伦&quot;]</code></p><h5 id="字典嵌套">字典嵌套</h5><p>字典可以作为字典某一个key的value，来实现字典的<strong>嵌套</strong></p><p><strong>字典可嵌套，取值可叠加</strong></p><p>字典的键（key）可以是以下数据类型：</p><p>不可变数据类型：</p><ul><li>字符串（string）</li><li>数字（integer、float、complex）</li><li>布尔值（boolean）</li><li>元组（tuple）</li></ul><p>内置的哈希类型：</p><ul><li>字节串（bytes）</li></ul><p>字典的键必须是<strong>不可变的</strong>，因为字典使用<strong>哈希表</strong>来实现快速查找和访问。可变的数据类型（如列表）不能用作字典的键，因为它们的哈希值可以发生变化，从而破坏了字典的内部结构。</p><h5 id="字典操作">字典操作</h5><p><img src="https://imgbed.zshlmy.love/Typora/image-20230831225922087.png" alt="image-20230831225922087"></p><h4 id="数据容器对比">数据容器对比</h4><table><thead><tr><th></th><th>列表</th><th>元组</th><th>字符串</th><th>集合</th><th>字典</th></tr></thead><tbody><tr><td>元素数量</td><td>多个</td><td>多个</td><td>多个</td><td>多个</td><td>多个</td></tr><tr><td>元素类型</td><td>任意</td><td>任意</td><td>字符</td><td>任意</td><td>键值对</td></tr><tr><td>重复元素</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>下标索引</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>是否只读</td><td>否</td><td>只读</td><td>只读</td><td>否</td><td>否</td></tr><tr><td>使用场景</td><td>可修改可重复的数据</td><td>不可修改可重复的数据</td><td>一串字符串</td><td>不可重复的数据</td><td>以key检索value，有对应关系</td></tr></tbody></table><h5 id="数据容器通用操作">数据容器通用操作</h5><p>多数数据容器都支持下标索引取值，所以多数数据容器都支持<code>while</code>遍历</p><p>数据容器都支持<code>for</code>遍历</p><p>数据容器的通用方法<code>len()</code>,<code>min()</code>,<code>max()</code></p><p>数据容器间可以<strong>互相转化</strong>，注意<strong>字典</strong>和<strong>字符串</strong>在转换成<strong>其他数据容器</strong>时会<strong>有变化</strong>，例如字典转换成列表就只剩<code>key</code>，而丢掉了<code>value</code></p><p>**<code>sorted(数据容器,[reverse=True])</code>**第二个参数默认为<code>False</code></p><p>将数据容器排序按**<code>从小到大</code><strong>的顺序排序，如果第二个参数传<code>True</code>则</strong><code>从大到小</code><strong>排序，然后放进</strong>列表**里,你懂的，看上面↑</p><p>字母的大小取决于他的<code>ascii</code>值</p><p><img src="https://imgbed.zshlmy.love/Typora/image-20230831232707221.png" alt="image-20230831232707221"></p>]]></content>
      
      
      <categories>
          
          <category> python学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端人python学习日记】基础语法【一】</title>
      <link href="/posts/2023826d.html"/>
      <url>/posts/2023826d.html</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型">数据类型</h3><h4 id="基本类型">基本类型</h4><ul><li>字符串类型</li><li>整型（有符号）</li><li>浮点型（有符号）</li></ul><h5 id="查看数据类型">查看数据类型</h5><p><code>type()</code>会返回数据的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">int_data=<span class="number">520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(int_data))</span><br><span class="line">float_data=<span class="number">13.14</span></span><br><span class="line">float_type=<span class="built_in">type</span>(float_data)</span><br><span class="line"><span class="built_in">print</span>(float_type)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">&lt;class &quot;str&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;class &quot;int&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;class &quot;float&quot;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="类型转换">类型转换</h5><p><code>float(),int(),str()</code>改变数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int_data=<span class="built_in">int</span>(<span class="string">&quot;11&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(int_data),int_data)</span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><p>不是所有字符串都能转整型、浮点型，如果字符串不全是数字执行时会报错</p><p>整型转浮点型会带上小数部分，例如<code>11</code>转成<code>11.0</code></p><p>浮点型转整型会丢失小数部分，例如<code>11.353</code>转成<code>11</code></p><h4 id="标识符-变量名">标识符(变量名)</h4><p><strong>命名规则</strong></p><ul><li>英文</li><li>中文(不推荐使用中文)</li><li>数字(不可以用在开头)</li><li>下划线(_)</li></ul><p>这四类元素</p><p><strong>标识符区分大小写</strong></p><p><strong>不可使用关键字(保留字)</strong></p><h4 id="运算符">运算符</h4><h5 id="算术运算符">算术运算符</h5><ul><li><code>+</code>加</li><li><code>-</code>减</li><li><code>*</code>乘</li><li><code>/</code>除</li><li><code>//</code>整除运算符<code>9//2=4</code></li><li><code>%</code>取余运算符<code>9%2=1</code></li><li><code>**</code>指数运算符<code>2**3=8</code></li></ul><h5 id="赋值运算符">赋值运算符</h5><ul><li><code>=</code>把右边的数据赋值给左边的变量</li><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li><li><code>%=</code></li><li><code>//=</code></li><li><code>**=</code>幂赋值运算符,<code>a**=c</code>相当于<code>a=a**c</code></li></ul><h4 id="字符串">字符串</h4><h5 id="字符串的三种定义方式">字符串的三种定义方式</h5><ul><li><p>单引号<code>str='str1'</code></p></li><li><p>双引号<code>str=&quot;str2&quot;</code></p></li><li><p>三引号<code>str=&quot;&quot;&quot;str3&quot;&quot;&quot;</code>三引号支持多行数据</p></li></ul><p>如果字符串本身包含引号可以，使用其他的引号定义，也可以使用转义符**(\)**来解除引号的作用</p><h5 id="字符串拼接">字符串拼接</h5><p>使用**+**来进行字符串拼接</p><p>注意和<strong>js</strong>不同的是：字符串不能直接通过**+**来和整型或者浮点型进行拼接，否则会报类型错误</p><p>我们可以使用<strong>字符串格式化</strong>来进行字符串类型和整型的拼接</p><h5 id="字符串格式化">字符串格式化</h5><p>使用**%**进行占位</p><p>使用<strong>s</strong>表示将数据变成字符串放到占位的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tel=<span class="number">15151226564</span></span><br><span class="line">money=<span class="number">20.365</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的电话号码是%s,我的钱包余额是%s&quot;</span>%(tel,money))</span><br><span class="line"><span class="comment">#输出:我的电话号码是15151226564,我的钱包余额是20.365</span></span><br></pre></td></tr></table></figure><p>多个变量拼接使用括号括起来，用逗号分隔，按照输入顺序填入占位的地方</p><p><code>%s</code>字符串占位</p><p><code>%d</code>整型占位</p><p><code>%f</code>浮点型占位</p><h5 id="字符串格式化：数字精度控制">字符串格式化：数字精度控制</h5><ul><li><code>m</code>控制字符串宽度，设置的宽度小于数字本身<strong>不生效</strong></li><li><code>.n</code>控制小数点精度，要求是数字，会进行<strong>四舍五入</strong></li></ul><p><code>%5d</code>设置宽度为5，宽度不足会在前面补上<strong>空格</strong></p><p><code>%.2</code>设置小数点精度为2</p><p><code>%5.2f</code>设置宽度为5，小数点精度为2，小数部分也计入宽度</p><h5 id="字符串格式化：快速写法">字符串格式化：快速写法</h5><p>不理会类型，不做精度控制</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;张三&quot;</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我的名字是<span class="subst">&#123;name&#125;</span>,我的年龄是<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>类似<strong>js</strong>的模板字符串</p><h5 id="字符串格式化：表达式格式化">字符串格式化：表达式格式化</h5><p><strong>表达式</strong>是指有明确执行结果的代码语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str的数据类型是%s&quot;</span>%(<span class="built_in">type</span>(<span class="built_in">str</span>)))</span><br></pre></td></tr></table></figure><h4 id="Input和print">Input和print</h4><p>print是输出</p><p>input是输入</p><h5 id="input">input</h5><p>input输入完成后使用回车键完成输入</p><p>input需要使用一个变量接收输入的值<code>str=input()</code></p><p>input可以接收一个参数，进行输入提示</p><p>input接收输入的数据会变成字符串类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>(<span class="string">&quot;验证input获取到的数据类型?\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据类型是<span class="subst">&#123;<span class="built_in">type</span>(<span class="built_in">str</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#输出：数据类型是&lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h5 id="print">print</h5><p><code>print()</code> 函数有一个名为 <code>end</code> 的可选参数，它决定了在输出内容后要添加什么字符作为结尾，默认情况下是换行符 <code>\n</code></p><p><strong>end参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="判断语句">判断语句</h4><h5 id="布尔类型">布尔类型</h5><p>进行判断只有两个结果<strong>真</strong>或<strong>假</strong></p><p><code>True</code>表示真，<code>False</code>表示假</p><p><code>True</code>本质上是数字记作<strong>1</strong>，<code>False</code>记作<strong>0</strong></p><p><code>print(3+True)</code>输出4</p><p><code>print(3+True-False)</code>输出4</p><h5 id="比较运算符">比较运算符</h5><ul><li><code>&gt;</code></li><li><code>&lt;</code></li><li><code>==</code></li><li><code>!=</code></li><li><code>&gt;=</code></li><li><code>&lt;=</code></li></ul><h5 id="if判断语句">if判断语句</h5><p>if 判断条件 :</p><p>[空格]条件成立的执行语句</p><p>**python中使用空格来确定语句归属，需要4个空格，一个tab就是4个空格 **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">10</span>&gt;<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;10确实大于5&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>else</strong></p><p><code>else</code>和<code>if</code>同级，<code>else</code>是判断语句的一个分支，用来兜底，当其他分支不执行时，执行<code>else</code></p><p><strong>elif</strong></p><p><code>elif</code>和<code>else</code>和<code>if</code>同级，<code>elif</code>是判断语句的一个分支</p><h4 id="循环语句">循环语句</h4><h5 id="while循环语句">while循环语句</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world %d&quot;</span>%i)</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>while</code>后面的是循环条件，<code>while</code>条件需要得到布尔类型，<code>True</code>是继续循环，<code>False</code>是停止循环</p><p>一定要<strong>设置循环终止条件</strong>，否则会<strong>无限循环</strong></p><p><strong>缩进</strong>的要求同<code>if判断语句</code></p><h5 id="while循环嵌套">while循环嵌套</h5><p><strong>一定要注意重置内循环的状态，否则内循环只循环一次！！！</strong></p><h5 id="for循环">for循环</h5><p><code>while</code>本质上更像循环</p><p><code>for</code>本质上更像遍历和迭代</p><p><code>while</code> 循环像是一个开放式的“如果……那么”语句，只要条件为真，就会重复执行。而 <code>for</code> 循环像是一个计数的机制，用于遍历一系列元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&quot;hello world&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>将hello world的字符串遍历，并赋予x临时变量</p><p>理论上for循环不可能无限循环，因为<code>in</code>的数据处理集不可能无限大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;skdfkshkhkhfsadhkas&quot;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span> :</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">&quot;s&quot;</span>):</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s一共出现了%d次&quot;</span>%i)</span><br></pre></td></tr></table></figure><p><strong>for循环的变量作用域</strong></p><p>临时变量在编程规范上，只限度在<code>for</code>内部</p><p>如果在<code>for</code>外部访问临时变量是可以访问的</p><p>在编程规范上不建议这么做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#最后的i输出4</span></span><br></pre></td></tr></table></figure><h5 id="countine关键字">countine关键字</h5><p>终止本次循环，直接进入下一次循环</p><p>在<code>for</code>和<code>while</code>中有同样的作用</p><p>在嵌套中使用，只对<strong>当前循环</strong>生效</p><h5 id="break关键字">break关键字</h5><p>直接结束循环</p><p>在<code>for</code>和<code>while</code>中有同样的作用</p><p>在嵌套中使用，只对<strong>当前循环</strong>生效，记住他只是结束了当前循环，不是把当前循环代码删了</p><h4 id="函数">函数</h4><p>提高代码复用性和开发效率</p><h5 id="函数的定义">函数的定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><h5 id="函数的调用">函数的调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><p>函数必须<strong>先定义</strong>，再使用</p><h5 id="return返回值">return返回值</h5><p>返回值也是函数执行的结果，可以用来赋值</p><p>不设置返回值返回<strong>None</strong></p><p><code>None</code>是一个特殊的字面量，类型为<code>NoneType</code></p><ul><li>一般用于if判断语句中，代表<code>False</code></li><li>也可以给一个变量赋值为<code>None</code>意为暂时没有具体值</li></ul><h5 id="return多个返回值">return多个返回值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myreturn</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="literal">True</span>,<span class="string">&quot;hello&quot;</span></span><br><span class="line">x,y,z=myreturn()</span><br></pre></td></tr></table></figure><h5 id="函数的多种参数">函数的多种参数</h5><ul><li>位置参数：根据函数的形参位置顺序，依次传递参数，<strong>顺序个数必须一致</strong></li><li>关键字传参：函数调用时，在<code>()</code>里使用key(形参名)=value(实参)的方式进行传参，取消了参数传递的顺序要求，可以和位置参数混用</li><li>缺省参数：在函数定义时定义了参数的默认值，调用时不传该参数就使用默认值，无论定义还是调用，位置参数要在默认参数之前</li><li>不定长参数：不确定调用时会传入多少个参数（不传参也可以），分为位置不定长和关键字不定长两种</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#位置不定长</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mytest</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">mytest(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">mytest(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="number">996</span>)</span><br><span class="line"><span class="comment">#会把接收到的参数变成一个元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关键字不定长</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mytest</span>(<span class="params">**kargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kargs)</span><br><span class="line">mytest(word1=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">mytest(word1=<span class="string">&quot;hello&quot;</span>,Word2=<span class="string">&quot;world&quot;</span>,num=<span class="number">996</span>)</span><br><span class="line"><span class="comment">#会把接收到的参数变成一个字典</span></span><br></pre></td></tr></table></figure><h5 id="匿名函数">匿名函数</h5><p><strong>匿名函数的定义</strong></p><p><code>lambda</code>关键字，可以定义<strong>匿名函数</strong>(无名称)</p><p><strong>有名称</strong>的函数(使用<code>def</code>定义的)，可以基于函数名<strong>无限次使用</strong></p><p>使用<code>lambda</code>定义的<strong>匿名函数</strong>只可以<strong>临时使用一次</strong></p><p><strong>定义</strong></p><p><code>lambda 参数:函数体(只能写一行代码，无法写多行)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myprint</span>(<span class="params">compute</span>):</span><br><span class="line">    <span class="built_in">print</span>(compute(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">myprint(<span class="keyword">lambda</span> x,y:x+y)</span><br><span class="line"><span class="comment">#不用写return，直接就return了</span></span><br></pre></td></tr></table></figure><p>前端OS：只能写一行，那我为啥不直接写表达式</p><h5 id="函数作为参数传递">函数作为参数传递</h5><p>前端OS：这可以当做特性来显摆吗？我一直以为所有语言都能这么玩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myprint</span>(<span class="params">compute</span>):</span><br><span class="line">    <span class="built_in">print</span>(compute(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><p>与<strong>普通传参</strong>不同，普通传参<strong>传的是数据</strong>，把<strong>函数</strong>作为参数传递，<strong>传递的是逻辑</strong></p><h5 id="函数的嵌套调用">函数的嵌套调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    b()</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>在函数a中嵌套调用b，当a中的代码执行到b的时候，会在执行完b的所有代码后，再去执行a剩下的代码</p><h4 id="变量作用域">变量作用域</h4><p><strong>全局作用域</strong>和<strong>局部作用域</strong>两种</p><h5 id="局部变量">局部变量</h5><p><strong>局部变量</strong>是在函数体<strong>内部</strong>的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    num=<span class="number">15</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">a()</span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#报错num未定义</span></span><br></pre></td></tr></table></figure><p>变量num的定义是在a函数内部，在外部访问报错</p><h5 id="全局变量">全局变量</h5><p>在函数<strong>体内</strong>，<strong>体外</strong>都能访问到的变量</p><p>如果非要在函数内部定义一个全局变量，可以使用global关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    <span class="keyword">global</span> num=<span class="number">15</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">a()</span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#15</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端八股文】防抖和节流,数组去重,深浅拷贝,import和require,export导出</title>
      <link href="/posts/2023716d.html"/>
      <url>/posts/2023716d.html</url>
      
        <content type="html"><![CDATA[<h3 id="防抖和节流">防抖和节流</h3><h4 id="防抖">防抖</h4><p>防抖是触发后在单位时间里，再次触发，会重新计算触发时间</p><p>可以理解成游戏里的回城，点击回城后，在回城过程里再次点击回城，回城会重新开始读条</p><p>非立即执行版的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p>立即执行版的意思是触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。</p><h4 id="节流">节流</h4><p>节流是单位时间里，多次触发，事件只执行一次，会稀释函数执行频率</p><p>可以理解成游戏里的技能cd，cd没转好，点技能也没用</p><p>对于节流，一般有两种方式可以实现，分别是时间戳版和定时器版</p><h3 id="数组去重">数组去重</h3><ul><li>利用ES6 Set去重（ES6中最常用）</li><li>利用for嵌套for，然后使用splice去重（ES5中最常用）</li><li>利用indexOf去重</li><li>利用sort</li><li>利用includes</li><li>利用hasOwnProperty</li><li>利用filter</li><li>利用递归去重</li><li>利用Map数据结构去重</li></ul><h3 id="深浅拷贝">深浅拷贝</h3><p>深拷贝只针对Array和Object这种引用类型的数据</p><p>我们在定义一个引用类型的数据的变量后，JavaScript会为这个数据开辟一个内存空间，然后把这个内存空间的地址赋给这个变量</p><p>浅拷贝就是给新的变量拷贝这个引用数据的引用，新变量将引用原始数据的同一存储位置，因此对其中一个变量所做的更改会反映在另一个变量中，因为这两个变量的引用指向同一片内存空间</p><p>深拷贝会创建一个新的数据结构，并将原始数据的值复制到新的存储位置中，两个变量将引用不同的内存位置，因此对一个变量的更改不会影响到另一个变量</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6e13a5cbeab9aaf0a19bcbf88d9b2cde.png" alt="avatar"></p><h4 id="深拷贝的方法">深拷贝的方法</h4><ul><li>JSON序列化与反序列化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clonedObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(originalObject));</span><br></pre></td></tr></table></figure><ul><li>递归复制</li><li>使用第三方库，例如lodash的cloneDeep</li></ul><h3 id="import和require">import和require</h3><ul><li>在ES6模块系统中，import语句在代码编译阶段执行，而require在CommonJS模块系统中是在运行时执行的。</li><li>import语句必须放在文件的顶部，不能在条件语句或函数中动态导入模块，而require可以根据需要动态加载模块。</li><li>无论是import还是require，当导入的模块是可变对象时，修改导入的对象会影响原始对象，需要进行深拷贝操作以避免修改原始对象。</li><li>import语句有助于静态分析和优化，实现Tree-shaking（消除未使用的代码）的可能性，而require在CommonJS模块系统中不支持静态分析和优化。</li><li>import语句是ES6模块系统的一部分，需要在浏览器中使用时进行转换为ES5语法，通过构建工具（如Webpack、Babel）可以实现在现代浏览器中使用import语句。</li><li>require是Node.js中的模块系统，不直接适用于浏览器环境，但现代浏览器对ES6模块进行了广泛支持。</li><li>require使用module.exports导出模块，而import使用export关键字导出模块，支持具名导出和默认导出。</li><li>require通过相对路径或绝对路径解析模块，而import支持相对路径、绝对路径和模块名称解析，使用更先进的模块解析算法。</li><li>require适用于Node.js环境，import适用于现代浏览器和一些支持ES6模块的开发环境。</li></ul><p>需要注意的是，尽管现代浏览器和构建工具对import语法进行了广泛支持，但在特殊情况下可能需要进行转码或使用其他解决方案以实现更广泛的浏览器兼容性。</p><h3 id="export导出">export导出</h3><h4 id="默认导出">默认导出</h4><p>默认导出允许在一个模块中只导出一个默认的值，该值可以是任何类型，例如对象、函数或类。在导入时，不需要使用花括号，而是直接指定导入的名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用默认导出</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><h4 id="具名导出">具名导出</h4><p>具名导出允许在一个模块中导出多个变量、函数或类，并使用花括号指定要导入的名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用具名导出</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, sayHello &#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);      <span class="comment">// 输出: John</span></span><br><span class="line"><span class="title function_">sayHello</span>();             <span class="comment">// 输出: Hello, John!</span></span><br></pre></td></tr></table></figure><h4 id="分别导出">分别导出</h4><p>分别导出允许在一个模块中同时使用默认导出和具名导出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name, sayHello &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用分别导出</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> add, &#123; name, sayHello &#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);      <span class="comment">// 输出: John</span></span><br><span class="line"><span class="title function_">sayHello</span>();             <span class="comment">// 输出: Hello, John!</span></span><br></pre></td></tr></table></figure><h4 id="导出重命名">导出重命名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="type">const</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">export &#123; name as firstName &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用重命名的导出变量</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName &#125; from <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line">console.log(firstName); <span class="comment">// 输出: John</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 前端八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端八股文】ES6新特性,面向对象编程,事件循环,null和undefined,前端缓存的理解</title>
      <link href="/posts/2023715d.html"/>
      <url>/posts/2023715d.html</url>
      
        <content type="html"><![CDATA[<h3 id="ES6新特性">ES6新特性</h3><h4 id="块级作用域">块级作用域</h4><p>引入<code>let</code>和<code>const</code>关键字，允许在块级作用域中声明变量和常量，解决了以前使用<code>var</code>关键字带来的作用域问题</p><h4 id="箭头函数">箭头函数</h4><p>提供了一种更简洁的函数定义语法，使用<code>=&gt;</code>箭头符号，可以减少函数声明的代码量</p><h4 id="默认参数">默认参数</h4><p>在函数定义时设置参数的默认值，在不传入参数时使用默认值</p><h4 id="扩展运算符">扩展运算符</h4><p>在函数调用，数组，对象中展开数组或对象</p><h4 id="解构赋值">解构赋值</h4><p>允许通过模式匹配的方法从数组或对象中解析出值，并赋给变量，可以快速获取使用值</p><h4 id="模板字符串">模板字符串</h4><p>使用反引号`包裹字符串，使用<code>$&#123;&#125;</code>插入变量和表达式，支持多行字符串的书写</p><h4 id="类">类</h4><p>引入类<code>class</code>的概念，并通过<code>constructor</code>方法定义构造函数，简化了面向对象编程</p><h4 id="模块化">模块化</h4><p>ES6引入了原生的模块系统，使用<code>import</code>和<code>export</code>关键字可以方便地导入和导出模块，提供了更好的代码组织和复用</p><h4 id="Promise和异步await">Promise和异步await</h4><p>引入了Promise对象和异步/await语法，提供了更好的异步编程方式，避免了回调地狱</p><h4 id="Map和Set">Map和Set</h4><p>引入了Map和Set两种新的数据结构，提供了更方便高效的数据存储和操作方式</p><h4 id="数组方法">数组方法</h4><ol><li><code>find()</code>：返回数组中满足条件的第一个元素。</li><li><code>findIndex()</code>：返回数组中满足条件的第一个元素的索引。</li><li><code>filter()</code>：返回数组中满足条件的所有元素组成的新数组。</li><li><code>forEach()</code>：遍历数组中的每个元素，并执行指定的回调函数。</li><li><code>map()</code>：将数组中的每个元素进行处理，返回一个新数组。</li><li><code>some()</code>：判断数组中是否有至少一个元素满足指定条件。</li><li><code>every()</code>：判断数组中的所有元素是否都满足指定条件。</li><li><code>reduce()</code>：对数组中的元素进行累加或累积计算。</li><li><code>includes()</code>：判断数组是否包含指定的元素。</li><li><code>Array.from()</code>：将类似数组的对象或可迭代对象转换为真正的数组。</li></ol><h4 id="字符串方法">字符串方法</h4><ol><li><code>startsWith()</code>：判断字符串是否以指定的字符开头。</li><li><code>endsWith()</code>：判断字符串是否以指定的字符结尾。</li><li><code>includes()</code>：判断字符串是否包含指定的字符。</li><li><code>repeat()</code>：重复字符串指定次数。</li><li><code>padStart()</code>：在字符串的开头添加指定字符，直到字符串达到指定长度。</li><li><code>padEnd()</code>：在字符串的结尾添加指定字符，直到字符串达到指定长度。</li><li><code>trim()</code>：去除字符串两端的空格。</li></ol><h3 id="面向对象编程">面向对象编程</h3><h4 id="面向对象的特征">面向对象的特征</h4><p>1、“抽象”，把现实世界中的某一类东西，提取出来，用程序代码表示；</p><p>2、“封装”，把过程和数据包围起来，对数据的访问只能通过已定义的界面；</p><p>3、“继承”，一种联结类的层次模型；</p><p>4、“多态”，允许不同类的对象对同一消息做出响应。</p><h3 id="事件循环">事件循环</h3><p>事件循环过程确保了 JavaScript 在单线程环境下的异步执行</p><p>通过将异步任务转换为微任务，在适当的时机执行，保证了任务的顺序性和及时性</p><ol><li><p>同步任务执行，这个过程可能会产生微任务，将微任务加入到微任务队列中</p></li><li><p>微任务执行，微任务执行的时候可能会产生新的微任务，系统会将所有微任务执行完成，直到微任务队列为空</p></li><li><p>执行宏任务，执行过程可能会产生微任务，将微任务加入到微任务队列中</p></li><li><p>微任务执行，微任务执行的时候可能会产生新的微任务，系统会将所有微任务执行完成，直到微任务队列为空</p></li><li><p>执行下一个宏任务，执行过程可能还会产生微任务，将微任务加入到微任务队列中</p></li></ol><p>再次执行2，如此往复，事件就循环起来了</p><h3 id="null和undefined">null和undefined</h3><p>undefined代表未定义的，通常是</p><ul><li>定义一个变量没有初始化，JavaScript就会给他一个undefined</li><li>没有给一个形参传实参，那么这个形参的变量值为undefined</li><li>一个没有指定返回值的函数调用后返回undefined</li></ul><p>null代表一个空值，JavaScript不会主动给一个变量设置null，JavaScript只会给一个未初始化的变量设置为undefined，它是用来让程序员表明某个用var声明的变量时没有值</p><h3 id="前端缓存的理解-前端数据持久化的理解">前端缓存的理解 || 前端数据持久化的理解</h3><p>http缓存是做http请求传输时带上的缓存，一般是后端配置，主要在服务器代码上配置，浏览器缓存一般是前端在js中配置的</p><p>一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于<strong>缓存文件可以重复利用</strong>，还可以减少带宽，降低网络负荷</p><p>缓存是最简单高效的数据请求优化方法，数据请求可分为，发送请求，后端处理，浏览器响应三个阶段，缓存可以在一和三中进行优化，比如直接使用缓存不请求数据，或者前端发送请求，但后端和前端数据一样，后端就不用回传数据，减少浏览器响应数据</p>]]></content>
      
      
      <categories>
          
          <category> 前端八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 前端八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端八股文】this,apply,call,bind,作用域链,原型链,闭包</title>
      <link href="/posts/2023627d.html"/>
      <url>/posts/2023627d.html</url>
      
        <content type="html"><![CDATA[<h2 id="【前端八股文】promise-箭头函数-var-let-const">【前端八股文】promise,箭头函数,var,let,const</h2><h3 id="this">this</h3><h4 id="函数中this的指向问题">函数中this的指向问题</h4><p>谁调用函数，this就指向谁</p><h5 id="全局作用域">全局作用域</h5><p>在全局作用域中，函数没有被绑定到任何对象上，this指向全局对象（浏览器环境下是window，在node.js环境中this指向global）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br></pre></td></tr></table></figure><h5 id="函数调用">函数调用</h5><p>当函数作为一个独立函数调用时，函数中this指向全局对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mythis</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法调用">方法调用</h5><p>当一个函数作为一个对象的方法时，this指向这个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello,&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="comment">//this指向obj这个对象</span></span><br></pre></td></tr></table></figure><h5 id="构造函数">构造函数</h5><p>当一个函数用new关键字作为一个构造函数调用创建一个新实例的时候，this指向这个新的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> jack=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jack.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h5 id="显式绑定">显式绑定</h5><p>通过call(),apply()，可以显式的指定函数的this值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello,&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj1=&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2=&#123;<span class="attr">name</span>:<span class="string">&#x27;john&#x27;</span>&#125;</span><br><span class="line">sayHello.<span class="title function_">apply</span>(obj1)</span><br><span class="line">sayHello.<span class="title function_">call</span>(obj2)</span><br></pre></td></tr></table></figure><h5 id="箭头函数">箭头函数</h5><p>箭头函数的this是在一开始就定义好的，而不是在运行时确定的，他会继承外部作用域的this值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:jack,</span><br><span class="line">    <span class="attr">sayHello</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello,&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="comment">//箭头函数的this指向外部作用域的this，这里输出Hello，undefined</span></span><br></pre></td></tr></table></figure><h3 id="bind，apply，call">bind，apply，call</h3><p>共同点：都是JavaScript内置方法，都改变this指向，都要接收一个要改变为this指向的对象</p><p>不同点：</p><p>​bind是返回一个新的已经改变了this指向的函数，不会立即调用，但这会永久改变this指向</p><p>​apply和call都是立即调用，只改变一次this指向</p><p>​call是一个，一个传参数，apply是传一个数组或一个类数组</p><p>call和apply第一个参数为null或undefined时，指向全局对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 call 方法调用 person 对象的 greet 方法，并将 this 设置为 person2，传递参数 &#x27;Hello&#x27;</span></span><br><span class="line">person.<span class="property">greet</span>.<span class="title function_">call</span>(person2, <span class="string">&#x27;Hello&#x27;</span>); </span><br><span class="line"><span class="comment">// 输出: &quot;Hello, Jane&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 apply 方法调用 person 对象的 greet 方法，并将 this 设置为 person2，传递参数数组 [&#x27;Hi&#x27;]</span></span><br><span class="line">person.<span class="property">greet</span>.<span class="title function_">apply</span>(person2, [<span class="string">&#x27;Hi&#x27;</span>]); </span><br><span class="line"><span class="comment">// 输出: &quot;Hi, Jane&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 bind 方法创建一个新函数，并将 this 设置为 person2</span></span><br><span class="line"><span class="keyword">const</span> greetPerson2 = person.<span class="property">greet</span>.<span class="title function_">bind</span>(person2);</span><br><span class="line"><span class="comment">// 调用新创建的函数，并传递参数 &#x27;Hola&#x27;</span></span><br><span class="line"><span class="title function_">greetPerson2</span>(<span class="string">&#x27;Hola&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出: &quot;Hola, Jane&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原型链">原型链</h3><p>在某些时候我们可以在构造函数的prototype中添加一些方法，使用这个构造函数创建的实例对象都会带上这个方法，当我们在一个对象上调用方法的时候，如果他在自身上找不到这个方法，他会在原型链上往上找，原型链的顶端是null</p><p>在浏览器打印的[[prototype]]和__ <em>proto</em> _ _是等价的</p><p>每个JavaScript对象都有原型对象，对象可以通过__ <em>proto</em> _ <em>来访问他的原型，对象的</em>_ <em>proto</em> _ _指向他的构造函数的prototype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在构造函数的原型上定义一个方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个实例对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用实例对象的方法</span></span><br><span class="line">person1.<span class="title function_">sayHello</span>(); <span class="comment">// 输出: Hello, my name is Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建另一个实例对象</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用另一个实例对象的方法</span></span><br><span class="line">person2.<span class="title function_">sayHello</span>(); <span class="comment">// 输出: Hello, my name is Bob</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="作用域链">作用域链</h3><p>当JavaScript执行时，每个函数都会创建一个作用域链，包含活跃对象和[[Scope]]</p><p>活跃对象包含函数的局部变量和参数</p><p>[[Scope]]属性指向当前函数所在作用域上的所有父级作用域</p><p>如果要获取一个变量的值没有在活跃对象上找到，他会去[[Scope]]上继续寻找，直到找到该变量或达到全局作用域</p><h3 id="闭包">闭包</h3><h4 id="闭包的产生">闭包的产生</h4><p>函数嵌套，内部函数可以引用外部函数作用域中的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> outerVariable = <span class="string">&#x27;I am from outer function&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable); <span class="comment">// 内部函数引用外部函数的变量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> innerFunction; <span class="comment">// 返回内部函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closure = <span class="title function_">outerFunction</span>(); <span class="comment">// 调用外部函数，得到内部函数的引用</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">closure</span>(); <span class="comment">// 输出: &quot;I am from outer function&quot;</span></span><br></pre></td></tr></table></figure><h4 id="闭包的作用">闭包的作用</h4><p><strong>保护变量</strong>：闭包可以创建一个私有的作用域，将变量隐藏起来，只能通过内部函数来访问和修改。这样可以防止外部对变量的意外修改和访问，实现了数据的封装和保护。</p><p><strong>实现数据的持久化</strong>：由于闭包的特性，内部函数持有对外部函数作用域的引用，使得外部函数的变量不会在函数执行完毕后被销毁。这样，可以通过闭包将数据持久化，使得数据在函数执行完毕后仍然存在，并可以被后续的操作所使用。</p><h4 id="闭包的缺点">闭包的缺点</h4><p>会造成内存泄漏，因为被闭包保护的数据仍然被引用，js的v8引擎垃圾回收机制不会去回收内存</p><h4 id="闭包的处理">闭包的处理</h4><p>当闭包持有大量数据时，可能会导致内存泄漏。为了避免内存泄漏，应该注意在不需要使用闭包时解除对其的引用，让垃圾回收机制回收不再需要的内存。可以手动解除引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">closure = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>或者使用一些技术手段如 WeakMap 来解决内存泄漏问题。</p>]]></content>
      
      
      <categories>
          
          <category> 前端八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 前端八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端八股文】promise,箭头函数,var,let,const</title>
      <link href="/posts/2023626d.html"/>
      <url>/posts/2023626d.html</url>
      
        <content type="html"><![CDATA[<h2 id="【前端八股文】promise-箭头函数-var-let-const">【前端八股文】promise,箭头函数,var,let,const</h2><h3 id="promise">promise</h3><p>promise是JavaScript中用来处理异步操作的对象，代表了一个异步操作的最终结果</p><p>new Promise（（resolve，reject）=&gt;{…}）这里的resolve和inject是等会通过then和catch传入的两个回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数，返回一个Promise对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line"><span class="comment">//这里的resolve是等会通过then传入成功的回调</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="title function_">resolve</span>(<span class="string">&#x27;Data fetched&#x27;</span>);</span><br><span class="line"><span class="comment">//这里的resolve是调用promise的resolve方法把promise状态设置为成功</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async关键字定义的异步函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Fetching data...&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 等待Promise对象的解析</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data fetched successfully!&#x27;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用异步函数</span></span><br><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><p>promise是用来解决回调地狱问题，promsie可以用来做网络请求，定时器操作，文件读写操作等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = (<span class="params">milliseconds</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, milliseconds);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行&#x27;</span>);</span><br><span class="line"><span class="title function_">delay</span>(<span class="number">2000</span>)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;延迟2秒后执行&#x27;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发生错误:&#x27;</span>, err);</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="comment">//这个例子中体现了promise可以在执行完后再指定回调</span></span><br></pre></td></tr></table></figure><h4 id="promise的同步与异步">promise的同步与异步</h4><p>同步过程：</p><p>创建Promise对象：当调用Promise的构造函数时，创建Promise对象是同步执行的。<br>执行executor函数：executor函数会立即执行，它接收两个参数(resolve和reject)并立即执行其中之一。<br>返回Promise对象：Promise构造函数返回Promise对象本身，这也是同步操作。<br>异步过程：</p><p>处理.then()和.catch()：通过调用.then()和.catch()方法，可以为Promise对象添加成功和失败的回调函数。这些回调函数是异步执行的，它们会在Promise的状态改变后执行，而不会阻塞后续代码的执行。<br>异步操作的解析：如果在Promise对象的异步操作完成之前调用了.then()方法，成功回调函数会被加入到微任务队列中，并在当前同步代码执行完毕后执行。这样可以确保回调函数在异步操作完成后执行。<br>异步操作的延迟：如果在Promise对象的异步操作完成之前调用了.then()方法，异步操作的执行会被延迟到当前同步代码执行完毕后才会开始。</p><p>总之，Promise的创建和执行executor函数是同步的过程，而处理.then()和.catch()以及异步操作的解析和延迟是异步的过程。这种异步性质使得Promise能够更好地处理异步操作，并避免了回调地狱的问题。</p><p>promise的主体部分代码是同步执行，then和catch是异步执行的</p><h4 id="promsie的状态">promsie的状态</h4><p>promise有三种状态，pending，rejected（失败），fullfilled（成功）</p><p>Promise的状态一旦改变，就不会再变，任何时候都可以得到这个结果，状态不可以逆，只能由 pending变成fulfilled或者由pending变成rejected</p><h4 id="promise的优点">promise的优点</h4><p>promise的返回值还是promise，使用then来指定回调，使用catch来捕获错误，catch可以放在最后统一捕获错误</p><p>promise相比于传统链式回调的优点在于：传统链式回调要在有结果之前就提前指定好回调，promise可以在获取结果之后再去指定回调</p><h4 id="promise的缺点">promise的缺点</h4><ul><li><p>无法取消Promise,一旦新建它就会立即执行，无法中途取消</p></li><li><p>如果不设置回调函数，Promise内部抛出的错误，不会反映到外部</p></li><li><p>当处于pending状态时，无法得知目前进展到哪一个阶段，是刚刚开始还是即将完成</p></li></ul><h4 id="promise的方法">promise的方法</h4><p>promise几种常用方法，除了then用来指定成功时的回调和catch用来捕获错误还有：</p><p>race和all，race会将最先有结果的promise最为整个promise的结果，all会在所有promise都有结果后再返回结果，如果有一个promise是失败的，那么整个promise的结果都是失败的，all方法返回的promise是一个数组，包含所有promise的结果</p><p>finally无论成功还是失败都会调用的回调</p><p>常用的方法还有reject和resolve，resolve传入的参数是对的就返回成功的promise，resolve的参数是失败的就返回失败的promise，无论reject的参数是什么都返回失败的promise</p><h4 id="async和await的使用">async和await的使用</h4><p>我们还可以使用async和await让代码更加简洁易读</p><h3 id="箭头函数">箭头函数</h3><h4 id="箭头函数与普通函数的区别：">箭头函数与普通函数的区别：</h4><ol><li>箭头函数没有自己的this，因此在确定this的值时需要通过查找作用域链。如果箭头函数被非箭头函数包含，this绑定的就是最近一层非箭头函数的this。</li><li>箭头函数没有自己的arguments对象，但可以访问外围函数的arguments对象。</li><li>箭头函数不能通过new关键字调用，也没有new.target[^new.target]值和原型。</li></ol><h4 id="箭头函数的特点：">箭头函数的特点：</h4><ol><li><p>语法更加简洁、清晰。</p></li><li><p>箭头函数继承而来的this指向永远不变，它只会从自己的作用域链的上一层继承this。</p></li><li><p>.call()/.apply()/.bind()无法改变箭头函数中this的指向。</p></li><li><p>箭头函数不能用作构造函数，不能通过new关键字实例化。</p></li><li><p>箭头函数没有自己的arguments对象，可以使用rest参数来访问箭头函数的参数列表。</p></li><li><p>箭头函数没有原型prototype。</p></li><li><p>箭头函数不能用作Generator函数，不能使用yield关键字。</p></li><li><p>箭头函数不具有super，也不具有new.target[^new.target]</p><p>[^new.target]: 当使用 <code>new</code> 关键字调用构造函数创建实例时，<code>new.target</code> 会引用正在被构造的对象的构造函数。换句话说，它提供了对正在被构造的类或构造函数的引用</p></li></ol><h3 id="var-let-const">var,let,const</h3><h4 id="var">var</h4><ul><li>全局声明：使用<code>var</code>关键字声明的变量具有全局作用域，可以在代码中的任何位置访问。</li><li>变量提升：在变量声明之前就可以访问变量，但其值会是<code>undefined</code>。这是因为变量声明会被提升到作用域的顶部，但变量赋值的操作会保留在原来的位置。</li><li>可重复定义：可以在同一作用域内多次使用<code>var</code>声明同一个变量，后面的声明会覆盖前面的声明。</li><li>可修改值：使用<code>var</code>声明的变量的值是可变的，可以通过赋值运算符进行修改</li></ul><p>var只有全局作用域和函数作用域，所谓全局作用域就是在代码的任何位置都能访问var声明的变量，而函数作用域在变量声明的当前函数内部访问变量。函数外部是无法访问函数内部声明的变量的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">20</span>; <span class="comment">// 函数作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 在函数内部可以访问变量y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">example</span>(); <span class="comment">// 输出: 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 报错: ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  y = <span class="number">20</span>; <span class="comment">// 函数作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 在函数内部可以访问变量y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">example</span>(); <span class="comment">// 输出: 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 输出: 20</span></span><br></pre></td></tr></table></figure><h4 id="let">let</h4><ul><li><p>块级作用域：使用<code>let</code>关键字声明的变量具有块级作用域，仅在其声明的块内部可见。</p></li><li><p>不能重复定义：在同一作用域内，不能使用<code>let</code>重新声明已存在的变量。这样可以避免变量的重复定义和潜在的错误。</p></li><li><p>可修改值：使用<code>let</code>声明的变量的值是可变的，可以通过赋值运算符进行修改。</p></li><li><p>其实是存在变量提升的，但是有暂时性死区[^暂时性死区]</p></li></ul><h4 id="const">const</h4><ul><li>块级作用域：使用<code>const</code>关键字声明的变量同样具有块级作用域，仅在其声明的块内部可见。</li><li>必须初始化：使用<code>const</code>声明变量时必须进行初始化，即必须给变量赋初始值。</li><li>不能修改值：使用<code>const</code>声明的变量是常量，其值在初始化后就不能被修改，尝试修改将会导致错误。</li><li>其实是存在变量提升的，但是有暂时性死区[^暂时性死区]</li></ul><p>需要注意的是，虽然使用<code>const</code>声明的变量值不能被直接修改，但对于复合类型（如对象和数组），其内部的属性或元素是可以被修改的。<code>const</code>只保证变量绑定的引用不变，而不保证引用指向的对象不变。</p><table><thead><tr><th></th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>作用域</td><td>函数作用域/全局作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>声明提升</td><td>提升变量名和初始化</td><td>仅提升变量名，不包括初始化</td><td>仅提升变量名，不包括初始化</td></tr><tr><td>暂时性死区</td><td>无</td><td>存在，访问会抛出 <code>ReferenceError</code> 错误</td><td>存在，访问会抛出 <code>ReferenceError</code> 错误</td></tr><tr><td>重复声明</td><td>允许</td><td>不允许</td><td>不允许</td></tr><tr><td>全局声明时作为window的属性</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><p>[^暂时性死区]: 变量声明会在作用域的顶部进行提升，但初始化被留在原地，直到定义位置之后的代码才会执行。在变量声明之前访问该变量会导致暂时性死区（TDZ）的出现，会抛出 <code>ReferenceError</code> 错误。只有在声明语句执行之后，变量才会进入到可访问的状态</p>]]></content>
      
      
      <categories>
          
          <category> 前端八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 前端八股文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/kslink.css"/>
      <url>/css/kslink.css</url>
      
        <content type="html"><![CDATA[/* 添加友链按钮 *//* 快速填写格式 */.addBtn {    display: flex;    justify-content: center;    flex-wrap: wrap;}.addBtn button {    transition: .2s;    display: flex;    margin: 5px auto;    color: var(--global-bg);    padding: 15px;    border-radius: 40px;    background: var(--search-result-title);    align-items: center;}button {    padding: 0;    outline: 0;    border: none;    background: 0 0;    cursor: pointer;    touch-action: manipulation;}.fa-solid, .fas {    font-family: "Font Awesome 6 Free";    font-weight: 900;}.addBtn i {    font-size: 1.3rem;    margin-right: 10px;}.addBtn button:hover {    background: var(--theme-color);    color: #fff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin.css"/>
      <url>/css/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: var(button-hover-color);}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 45% 92%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.02rem), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: '';  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: 'ヾ(≧O≦)〃嗷~'; /*点击后显示的内容*/  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(--coin-rotation-multiplier) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front, .coin__middle, .coin__back, .coin::before, .coin__front::after, .coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%), linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%), linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(to bottom, #fcfaf9 44%, transparent 44%, transparent 65%, #fcfaf9 65%, #fcfaf9 71%, #8590b3 71%), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9 47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent 72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: '';  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%), radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent 35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: '';  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(--shine-bg-multiplier) + 50%));  content: '';  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier)) rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: '';  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/bibi.js"/>
      <url>/js/bibi.js</url>
      
        <content type="html"><![CDATA[let svg = '<svg  viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" class="is-badge"><path  d="m512 268c0 17.9-4.3 34.5-12.9 49.7s-20.1 27.1-34.6 35.4c.4 2.7.6 6.9.6 12.6 0 27.1-9.1 50.1-27.1 69.1-18.1 19.1-39.9 28.6-65.4 28.6-11.4 0-22.3-2.1-32.6-6.3-8 16.4-19.5 29.6-34.6 39.7-15 10.2-31.5 15.2-49.4 15.2-18.3 0-34.9-4.9-49.7-14.9-14.9-9.9-26.3-23.2-34.3-40-10.3 4.2-21.1 6.3-32.6 6.3-25.5 0-47.4-9.5-65.7-28.6-18.3-19-27.4-42.1-27.4-69.1 0-3 .4-7.2 1.1-12.6-14.5-8.4-26-20.2-34.6-35.4-8.5-15.2-12.8-31.8-12.8-49.7 0-19 4.8-36.5 14.3-52.3s22.3-27.5 38.3-35.1c-4.2-11.4-6.3-22.9-6.3-34.3 0-27 9.1-50.1 27.4-69.1s40.2-28.6 65.7-28.6c11.4 0 22.3 2.1 32.6 6.3 8-16.4 19.5-29.6 34.6-39.7 15-10.1 31.5-15.2 49.4-15.2s34.4 5.1 49.4 15.1c15 10.1 26.6 23.3 34.6 39.7 10.3-4.2 21.1-6.3 32.6-6.3 25.5 0 47.3 9.5 65.4 28.6s27.1 42.1 27.1 69.1c0 12.6-1.9 24-5.7 34.3 16 7.6 28.8 19.3 38.3 35.1 9.5 15.9 14.3 33.4 14.3 52.4zm-266.9 77.1 105.7-158.3c2.7-4.2 3.5-8.8 2.6-13.7-1-4.9-3.5-8.8-7.7-11.4-4.2-2.7-8.8-3.6-13.7-2.9-5 .8-9 3.2-12 7.4l-93.1 140-42.9-42.8c-3.8-3.8-8.2-5.6-13.1-5.4-5 .2-9.3 2-13.1 5.4-3.4 3.4-5.1 7.7-5.1 12.9 0 5.1 1.7 9.4 5.1 12.9l58.9 58.9 2.9 2.3c3.4 2.3 6.9 3.4 10.3 3.4 6.7-.1 11.8-2.9 15.2-8.7z" fill="#1da1f2"></path></svg>'let total = 0let nowNum = 0let items = []let page = 1let Url = 'https://kkapi.fomal.cc/api/ispeak?author=6319fedef46fae97dcfa5ee2&page=' // 记住替换为你的API链接window.addEventListener('DOMContentLoaded', () => {    getNew();});// 获取数据function getNew() {    let bibi = document.getElementById('bibi');    try {        bibi.removeChild(document.getElementById('more'))    } catch (error) { }    bibi.innerHTML += '<div id="bb_loading"><img src="/assets/loading3.gif" alt="bb_loading"></div>' // bb_loading图片可以f12在我网站源码下载，也可以使用其他图片。    fetch(Url + page).then(res => res.json()).then((res) => {        total = res.data.total        items = res.data.items        nowNum += items.length        if (page == 1) {            document.querySelector('.bb-info').innerHTML = '<svg style="width:1.20em;height:1.20em;top:5px;fill:currentColor;overflow:hidden;position:relative"><use xlink:href="#icon-chat"></svg> 站长的唠叨(' + total + ')'        }        page += 1    }).then(() => {        bb();        if (nowNum < total) {            document.getElementById('bibi').innerHTML += '<button id="more" onclick="getNew()">再翻翻</button>'        }        document.getElementById('bibi').removeChild(document.getElementById('bb_loading'))    })}// 渲染数据function bb() {    let bb = document.getElementById('bb-main')    items.forEach((item) => {        let time = item.createdAt.substring(0, 10);        let div = document.createElement('div')        item.content = contentFormat(item.content)        div.className = 'bb-card'        div.innerHTML = '<div class="card-header"><div class="avatar"><img class="nofancybox"src="' + item.author.avatar + '"></div><div class="name">' + item.author.nickName + '</div>' + svg + '<div class="card-time">' + time + '</div></div><div class="card-content">' + item.content + '</div><div class="card-footer"><div data-v-185689ea=""class="card-label"style="background: ' + item.tag.bgColor + '; color: white;">' + item.tag.name + '</div></div>'        bb.appendChild(div)    })}// content格式化function contentFormat(s) {    let br = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;    let re_forimg = /<img(.*?)src=[\"|\']?(.*?)[\"|\']?(.*?)>|!\[(.*?)\]\((.*?)\)/g;    let getImgUrl = /(http(.*).[jpg|png|gif])/g;    let ls = s.match(getImgUrl)    s = s.replace(re_forimg, '')    s = s.replace(br, '')    let html = '<br>'    if (ls) {        ls.forEach((e) => {            html += '<a href="' + e + '" target="_blank" data-fancybox="group" class="fancybox"><img src="' + e + '"></a>'        })    }    s += html    return s}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin.js"/>
      <url>/js/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll('.tip-button')function coinAudio() {    var coinAudio = document.getElementById("coinAudio");    if (coinAudio) {        coinAudio.play();//有音频时播放    }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach((button) => {    var coin = button.querySelector('.coin')    // The larger the number, the slower the animation    coin.maxMoveLoopCount = 90    button.addEventListener('click', () => {        if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择        if (button.clicked) return        button.classList.add('clicked')        // Wait to start flipping th coin because of the button tilt animation        setTimeout(() => {            // Randomize the flipping speeds just for fun            coin.sideRotationCount = Math.floor(Math.random() * 5) * 90            coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI            button.clicked = true            flipCoin()            coinAudio()        }, 50)    })    var flipCoin = () => {        coin.moveLoopCount = 0        flipCoinLoop()    }    var resetCoin = () => {        coin.style.setProperty('--coin-x-multiplier', 0)        coin.style.setProperty('--coin-scale-multiplier', 0)        coin.style.setProperty('--coin-rotation-multiplier', 0)        coin.style.setProperty('--shine-opacity-multiplier', 0.4)        coin.style.setProperty('--shine-bg-multiplier', '50%')        coin.style.setProperty('opacity', 1)        // Delay to give the reset animation some time before you can click again        setTimeout(() => {            button.clicked = false        }, 300)    }    var flipCoinLoop = () => {        coin.moveLoopCount++        var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount        coin.angle = -coin.maxFlipAngle * Math.pow((percentageCompleted - 1), 2) + coin.maxFlipAngle        // Calculate the scale and position of the coin moving through the air        coin.style.setProperty('--coin-y-multiplier', -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11)        coin.style.setProperty('--coin-x-multiplier', percentageCompleted)        coin.style.setProperty('--coin-scale-multiplier', percentageCompleted * 0.6)        coin.style.setProperty('--coin-rotation-multiplier', percentageCompleted * coin.sideRotationCount)        // Calculate the scale and position values for the different coin faces        // The math uses sin/cos wave functions to similate the circular motion of 3D spin        coin.style.setProperty('--front-scale-multiplier', Math.max(Math.cos(coin.angle), 0))        coin.style.setProperty('--front-y-multiplier', Math.sin(coin.angle))        coin.style.setProperty('--middle-scale-multiplier', Math.abs(Math.cos(coin.angle), 0))        coin.style.setProperty('--middle-y-multiplier', Math.cos((coin.angle + Math.PI / 2) % Math.PI))        coin.style.setProperty('--back-scale-multiplier', Math.max(Math.cos(coin.angle - Math.PI), 0))        coin.style.setProperty('--back-y-multiplier', Math.sin(coin.angle - Math.PI))        coin.style.setProperty('--shine-opacity-multiplier', 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2)        coin.style.setProperty('--shine-bg-multiplier', -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + '%')        // Repeat animation loop        if (coin.moveLoopCount < coin.maxMoveLoopCount) {            if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add('shrink-landing')            window.requestAnimationFrame(flipCoinLoop)        } else {            button.classList.add('coin-landed')            coin.style.setProperty('opacity', 0)            setTimeout(() => {                button.classList.remove('clicked', 'shrink-landing', 'coin-landed')                setTimeout(() => {                    resetCoin()                }, 300)            }, 1500)        }    }})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fomal.js"/>
      <url>/js/fomal.js</url>
      
        <content type="html"><![CDATA[/* 阅读进度 start */document.addEventListener('pjax:complete', function () {  window.onscroll = percent;});document.addEventListener('DOMContentLoaded', function () {  window.onscroll = percent;});// 页面百分比function percent() {  // 先让菜单栏消失  try {    rmf.showRightMenu(false);    $('.rmMask').attr('style', 'display: none');  } catch (err) {  }  let a = document.documentElement.scrollTop, // 卷去高度    b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度 减去 可视高度    result = Math.round(a / b * 100), // 计算百分比    btn = document.querySelector("#go-up"); // 获取按钮  if (result < 95) { // 如果阅读进度小于95% 就显示百分比    btn.childNodes[0].style.display = 'none'    btn.childNodes[1].style.display = 'block'    btn.childNodes[1].innerHTML = result + '<span>%</span>';  } else { // 如果大于95%就显示回到顶部图标    btn.childNodes[1].style.display = 'none'    btn.childNodes[0].style.display = 'block'  }}/* 阅读进度 end *///----------------------------------------------------------------/* 导航栏显示标题 start */document.addEventListener('pjax:complete', tonav);document.addEventListener('DOMContentLoaded', tonav);//响应pjaxfunction tonav() {  document.getElementById("name-container").setAttribute("style", "display:none");  var position = $(window).scrollTop();  $(window).scroll(function () {    var scroll = $(window).scrollTop();    if (scroll > position) {      document.getElementById("name-container").setAttribute("style", "");      document.getElementsByClassName("menus_items")[1].setAttribute("style", "display:none!important");    } else {      document.getElementsByClassName("menus_items")[1].setAttribute("style", "");      document.getElementById("name-container").setAttribute("style", "display:none");    }    position = scroll;  });  //修复没有弄右键菜单的童鞋无法回顶部的问题  document.getElementById("page-name").innerText = document.title.split(" | 雨打窗前🌧️")[0];}function scrollToTop() {  document.getElementsByClassName("menus_items")[1].setAttribute("style", "");  document.getElementById("name-container").setAttribute("style", "display:none");  btf.scrollToDest(0, 500);}/* 导航栏显示标题 end *///----------------------------------------------------------------/* 欢迎信息 start *///get请求$.ajax({  type: 'get',  url: 'https://apis.map.qq.com/ws/location/v1/ip',  data: {    key: '7CYBZ-WU26G-DJCQT-QF2YS-TYT4H-7IBKP',  // 这里要写你的KEY!!!    output: 'jsonp',  },  dataType: 'jsonp',  success: function (res) {    ipLoacation = res;  }})function getDistance(e1, n1, e2, n2) {  const R = 6371  const { sin, cos, asin, PI, hypot } = Math  let getPoint = (e, n) => {    e *= PI / 180    n *= PI / 180    return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }  }  let a = getPoint(e1, n1)  let b = getPoint(e2, n2)  let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)  let r = asin(c / 2) * 2 * R  return Math.round(r);}function showWelcome() {  let dist = getDistance(120.21551, 30.25308, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度  let pos = ipLoacation.result.ad_info.nation;  let ip;  let posdesc;  //根据国家、省份、城市信息自定义欢迎语  switch (ipLoacation.result.ad_info.nation) {    case "日本":      posdesc = "よろしく，一起去看樱花吗";      break;    case "美国":      posdesc = "Let us live in peace!";      break;    case "英国":      posdesc = "想同你一起夜乘伦敦眼";      break;    case "俄罗斯":      posdesc = "干了这瓶伏特加！";      break;    case "法国":      posdesc = "C'est La Vie";      break;    case "德国":      posdesc = "Die Zeit verging im Fluge.";      break;    case "澳大利亚":      posdesc = "一起去大堡礁吧！";      break;    case "加拿大":      posdesc = "拾起一片枫叶赠予你";      break;    case "中国":      pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city + " " + ipLoacation.result.ad_info.district;      ip = ipLoacation.result.ip;      switch (ipLoacation.result.ad_info.province) {        case "北京市":          posdesc = "北——京——欢迎你~~~";          break;        case "天津市":          posdesc = "讲段相声吧。";          break;        case "河北省":          posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";          break;        case "山西省":          posdesc = "展开坐具长三尺，已占山河五百余。";          break;        case "内蒙古自治区":          posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";          break;        case "辽宁省":          posdesc = "我想吃烤鸡架！";          break;        case "吉林省":          posdesc = "状元阁就是东北烧烤之王。";          break;        case "黑龙江省":          posdesc = "很喜欢哈尔滨大剧院。";          break;        case "上海市":          posdesc = "众所周知，中国只有两个城市。";          break;        case "江苏省":          switch (ipLoacation.result.ad_info.city) {            case "南京市":              posdesc = "这是我挺想去的城市啦。";              break;            case "苏州市":              posdesc = "上有天堂，下有苏杭。";              break;            default:              posdesc = "散装是必须要散装的。";              break;          }          break;        case "浙江省":          posdesc = "东风渐绿西湖柳，雁已还人未南归。";          break;        case "河南省":          switch (ipLoacation.result.ad_info.city) {            case "郑州市":              posdesc = "豫州之域，天地之中。";              break;            case "南阳市":              posdesc = "臣本布衣，躬耕于南阳。此南阳非彼南阳！";              break;            case "驻马店市":              posdesc = "峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！";              break;            case "开封市":              posdesc = "刚正不阿包青天。";              break;            case "洛阳市":              posdesc = "洛阳牡丹甲天下。";              break;            default:              posdesc = "可否带我品尝河南烩面啦？";              break;          }          break;        case "安徽省":          posdesc = "蚌埠住了，芜湖起飞。";          break;        case "福建省":          posdesc = "井邑白云间，岩城远带山。";          break;        case "江西省":          posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";          break;        case "山东省":          posdesc = "遥望齐州九点烟，一泓海水杯中泻。";          break;        case "湖北省":          posdesc = "来碗热干面！";          break;        case "湖南省":          posdesc = "74751，长沙斯塔克。";          break;        case "广东省":          posdesc = "老板来两斤福建人。";          break;        case "广西壮族自治区":          posdesc = "桂林山水甲天下。";          break;        case "海南省":          posdesc = "朝观日出逐白浪，夕看云起收霞光。";          break;        case "四川省":          posdesc = "康康川妹子。";          break;        case "贵州省":          posdesc = "茅台，学生，再塞200。";          break;        case "云南省":          posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";          break;        case "西藏自治区":          posdesc = "躺在茫茫草原上，仰望蓝天。";          break;        case "陕西省":          posdesc = "来份臊子面加馍。";          break;        case "甘肃省":          posdesc = "羌笛何须怨杨柳，春风不度玉门关。";          break;        case "青海省":          posdesc = "牛肉干和老酸奶都好好吃。";          break;        case "宁夏回族自治区":          posdesc = "大漠孤烟直，长河落日圆。";          break;        case "新疆维吾尔自治区":          posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";          break;        case "台湾省":          posdesc = "我在这头，大陆在那头。";          break;        case "香港特别行政区":          posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";          break;        case "澳门特别行政区":          posdesc = "性感荷官，在线发牌。";          break;        default:          posdesc = "带我去你的城市逛逛吧！";          break;      }      break;    default:      posdesc = "带我去你的国家逛逛吧。";      break;  }  //根据本地时间切换欢迎语  let timeChange;  let date = new Date();  if (date.getHours() >= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨！";  else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了。";  else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";  else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，一起饮茶呀！";  else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";  else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";  else timeChange = "夜深了，早点休息，少熬夜。";  try {    //自定义文本和需要放的位置    document.getElementById("welcome-info").innerHTML =      `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style="color:var(--theme-color)">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style="color:var(--theme-color)">${dist}</span> 公里，当前的IP地址为： <span style="color:var(--theme-color)">${ip}</span>， ${posdesc}</b>`;  } catch (err) {    // console.log("Pjax无法获取#welcome-info元素🙄🙄🙄")  }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener('pjax:complete', showWelcome);/* 欢迎信息 end *///----------------------------------------------------------------/* 微博热搜 start */document.addEventListener('pjax:complete', getWeibo);document.addEventListener('DOMContentLoaded', getWeibo);function getWeibo() {  fetch('').then(data => data.json()).then(data => {  // 这里要写上你的API!!!    let html = '<style>.weibo-new{background:#ff3852}.weibo-hot{background:#ff9406}.weibo-jyzy{background:#ffc000}.weibo-recommend{background:#00b7ee}.weibo-adrecommend{background:#febd22}.weibo-friend{background:#8fc21e}.weibo-boom{background:#bd0000}.weibo-topic{background:#ff6f49}.weibo-topic-ad{background:#4dadff}.weibo-boil{background:#f86400}#weibo-container{overflow-y:auto;-ms-overflow-style:none;scrollbar-width:none}#weibo-container::-webkit-scrollbar{display:none}.weibo-list-item{display:flex;flex-direction:row;justify-content:space-between;flex-wrap:nowrap}.weibo-title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-right:auto}.weibo-num{float:right}.weibo-hotness{display:inline-block;padding:0 6px;transform:scale(.8) translateX(-3px);color:#fff;border-radius:8px}</style>'    html += '<div class="weibo-list">'    let hotness = {      '爆': 'weibo-boom',      '热': 'weibo-hot',      '沸': 'weibo-boil',      '新': 'weibo-new',      '荐': 'weibo-recommend',      '音': 'weibo-jyzy',      '影': 'weibo-jyzy',      '剧': 'weibo-jyzy',      '综': 'weibo-jyzy'    }    for (let item of data) {      html += '<div class="weibo-list-item"><div class="weibo-hotness ' + hotness[(item.hot || '荐')] + '">' + (item.hot || '荐') + '</div>'        + '<span class="weibo-title"><a title="' + item.title + '"href="' + item.url + '" target="_blank" rel="external nofollow noreferrer" style="color:#a08ed5">' + item.title + '</a></span>'        + '<div class="weibo-num"><span>' + item.num + '</span></div></div>'    }    html += '</div>'    document.getElementById('weibo-container').innerHTML = html  }).catch(function (error) {    console.log(error);  });}/* 微博热搜 end *///----------------------------------------------------------------/* 禁用f12与按键防抖 start */// 防抖全局计时器let TT = null;    //time用来控制事件的触发// 防抖函数:fn->逻辑 time->防抖时间function debounce(fn, time) {  if (TT !== null) clearTimeout(TT);  TT = setTimeout(fn, time);}// 复制提醒document.addEventListener("copy", function () {  debounce(function () {    new Vue({      data: function () {        this.$notify({          title: "哎嘿！复制成功🍬",          message: "若要转载最好保留原文链接哦，给你一个大大的赞！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 5000        });      }    })  }, 300);})// f12提醒但不禁用document.onkeydown = function (e) {  if (123 == e.keyCode || (e.ctrlKey && e.shiftKey && (74 === e.keyCode || 73 === e.keyCode || 67 === e.keyCode)) || (e.ctrlKey && 85 === e.keyCode)) {    debounce(function () {      new Vue({        data: function () {          this.$notify({            title: "你已被发现😜",            message: "小伙子，扒源记住要遵循GPL协议！",            position: 'top-left',            offset: 50,            showClose: true,            type: "warning",            duration: 5000          });        }      })    }, 300);  }};/* 禁用f12与按键防抖 end *///----------------------------------------------------------------/* 雪花特效 start */if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {  // 移动端不显示} else {  // document.write('<canvas id="snow" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none"></canvas>');  window && (() => {    let e = {      flakeCount: 50, // 雪花数目      minDist: 150,   // 最小距离      color: "255, 255, 255", // 雪花颜色      size: 1.5,  // 雪花大小      speed: .5,  // 雪花速度      opacity: .7,    // 雪花透明度      stepsize: .5    // 步距    };    const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {      window.setTimeout(e, 1e3 / 60)    }      ;    window.requestAnimationFrame = t;    const i = document.getElementById("snow"),      n = i.getContext("2d"),      o = e.flakeCount;    let a = -100,      d = -100,      s = [];    i.width = window.innerWidth,      i.height = window.innerHeight;    const h = () => {      n.clearRect(0, 0, i.width, i.height);      const r = e.minDist;      for (let t = 0; t < o; t++) {        let o = s[t];        const h = a,          w = d,          m = o.x,          c = o.y,          p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));        if (p < r) {          const e = (h - m) / p,            t = (w - c) / p,            i = r / (p * p) / 2;          o.velX -= i * e,            o.velY -= i * t        } else          o.velX *= .98,            o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),            o.velX += Math.cos(o.step += .05) * o.stepSize;        n.fillStyle = "rgba(" + e.color + ", " + o.opacity + ")",          o.y += o.velY,          o.x += o.velX,          (o.y >= i.height || o.y <= 0) && l(o),          (o.x >= i.width || o.x <= 0) && l(o),          n.beginPath(),          n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),          n.fill()      }      t(h)    }      , l = e => {        e.x = Math.floor(Math.random() * i.width),          e.y = 0,          e.size = 3 * Math.random() + 2,          e.speed = 1 * Math.random() + .5,          e.velY = e.speed,          e.velX = 0,          e.opacity = .5 * Math.random() + .3      }      ;    document.addEventListener("mousemove", (e => {      a = e.clientX,        d = e.clientY    }    )),      window.addEventListener("resize", (() => {        i.width = window.innerWidth,          i.height = window.innerHeight      }      )),      (() => {        for (let t = 0; t < o; t++) {          const t = Math.floor(Math.random() * i.width)            , n = Math.floor(Math.random() * i.height)            , o = 3 * Math.random() + e.size            , a = 1 * Math.random() + e.speed            , d = .5 * Math.random() + e.opacity;          s.push({            speed: a,            velX: 0,            velY: a,            x: t,            y: n,            size: o,            stepSize: Math.random() / 30 * e.stepsize,            step: 0,            angle: 180,            opacity: d          })        }        h()      }      )()  }  )();}/* 雪花特效 end *///----------------------------------------------------------------/* 星空特效 start */function dark() {  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;  var n, e, i, h, t = .05,    s = document.getElementById("universe"),    o = !0,    a = "180,184,240",    r = "226,225,142",    d = "226,225,224",    c = [];  function f() {    n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e)  }  function u() {    h.clearRect(0, 0, n, e);    for (var t = c.length, i = 0; i < t; i++) {      var s = c[i];      s.move(), s.fadeIn(), s.fadeOut(), s.draw()    }  }  function y() {    this.reset = function () {      this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)    }, this.fadeIn = function () {      this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)    }, this.fadeOut = function () {      this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))    }, this.draw = function () {      if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1); else if (this.comet) {        h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1); for (var t = 0; t < 30; t++)h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()      } else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r);      h.closePath(), h.fill()    }, this.move = function () {      this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)    }, setTimeout(function () {      o = !1    }, 50)  }  function m(t) {    return Math.floor(1e3 * Math.random()) + 1 < 10 * t  }  function l(t, i) {    return Math.random() * (i - t) + t  }  f(), window.addEventListener("resize", f, !1), function () {    h = s.getContext("2d");    for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();    u()  }(), function t() {    document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)  }()};dark()/* 星空特效 end *///----------------------------------------------------------------/* 表情放大 start */document.addEventListener('pjax:complete', function () {  if (document.getElementById('post-comment')) owoBig();});document.addEventListener('DOMContentLoaded', function () {  if (document.getElementById('post-comment')) owoBig();});// 表情放大function owoBig() {  let flag = 1, // 设置节流阀    owo_time = '', // 设置计时器    m = 3; // 设置放大倍数  // 创建盒子  let div = document.createElement('div'),    body = document.querySelector('body');  // 设置ID  div.id = 'owo-big';  // 插入盒子  body.appendChild(div)  // 构造observer  let observer = new MutationObserver(mutations => {    for (let i = 0; i < mutations.length; i++) {      let dom = mutations[i].addedNodes,        owo_body = '';      if (dom.length == 2 && dom[1].className == 'OwO-body') owo_body = dom[1];      // 如果需要在评论内容中启用此功能请解除下面的注释      // else if (dom.length == 1 && dom[0].className == 'tk-comment') owo_body = dom[0];      else continue;      // 禁用右键（手机端长按会出现右键菜单，为了体验给禁用掉）      if (document.body.clientWidth <= 768) owo_body.addEventListener('contextmenu', e => e.preventDefault());      // 鼠标移入      owo_body.onmouseover = (e) => {        if (flag && e.target.tagName == 'IMG') {          flag = 0;          // 移入300毫秒后显示盒子          owo_time = setTimeout(() => {            let height = e.path[0].clientHeight * m, // 盒子高              width = e.path[0].clientWidth * m, // 盒子宽              left = (e.x - e.offsetX) - (width - e.path[0].clientWidth) / 2, // 盒子与屏幕左边距离              top = e.y - e.offsetY; // 盒子与屏幕顶部距离            if ((left + width) > body.clientWidth) left -= ((left + width) - body.clientWidth + 10); // 右边缘检测，防止超出屏幕            if (left < 0) left = 10; // 左边缘检测，防止超出屏幕            // 设置盒子样式            div.style.cssText = `display:flex; height:${height}px; width:${width}px; left:${left}px; top:${top}px;`;            // 在盒子中插入图片            div.innerHTML = `<img src="${e.target.src}">`          }, 300);        }      };      // 鼠标移出隐藏盒子      owo_body.onmouseout = () => { div.style.display = 'none', flag = 1, clearTimeout(owo_time); }    }  })  observer.observe(document.getElementById('post-comment'), { subtree: true, childList: true })}/* 表情放大 end *///----------------------------------------------------------------/* 随便逛逛 start */// 随便逛逛// 发现有时会和当前页面重复，加一个判断function randomPost() {  fetch('/baidusitemap.xml').then(res => res.text()).then(str => (new window.DOMParser()).parseFromString(str, "text/xml")).then(data => {    let ls = data.querySelectorAll('url loc');    while (true) {      let url = ls[Math.floor(Math.random() * ls.length)].innerHTML;      if (location.href == url) continue;      location.href = url;      return;    }  })}/* 随便逛逛 end *///----------------------------------------------------------------/* 小猫咪 start */if (document.body.clientWidth > 992) {  function getBasicInfo() {    /* 窗口高度 */    var ViewH = $(window).height();    /* document高度 */    var DocH = $("body")[0].scrollHeight;    /* 滚动的高度 */    var ScrollTop = $(window).scrollTop();    /* 可滚动的高度 */    var S_V = DocH - ViewH;    var Band_H = ScrollTop / (DocH - ViewH) * 100;    return {      ViewH: ViewH,      DocH: DocH,      ScrollTop: ScrollTop,      Band_H: Band_H,      S_V: S_V    }  };  function show(basicInfo) {    if (basicInfo.ScrollTop > 0.001) {      $(".neko").css('display', 'block');    } else {      $(".neko").css('display', 'none');    }  }  (function ($) {    $.fn.nekoScroll = function (option) {      var defaultSetting = {        top: '0',        scroWidth: 6 + 'px',        z_index: 9999,        zoom: 0.9,        borderRadius: 5 + 'px',        right: 55.6 + 'px',        nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",        hoverMsg: "春天啦~",        color: "var(--theme-color)",        during: 500,        blog_body: "body",      };      var setting = $.extend(defaultSetting, option);      var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +        this.prop("id") : this.prop("nodeName");      if ($(".neko").length == 0) {        this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");      }      let basicInfo = getBasicInfo();      $(getThis)        .css({          'position': 'fixed',          'width': setting.scroWidth,          'top': setting.top,          'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',          'z-index': setting.z_index,          'background-color': setting.bgcolor,          "border-radius": setting.borderRadius,          'right': setting.right,          'background-image': 'url(' + setting.scImg + ')',          'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',          'background-size': 'contain'        });      $("#" + setting.nekoname)        .css({          'position': 'fixed',          'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',          'z-index': setting.z_index * 10,          'right': setting.right,          'background-image': 'url(' + setting.nekoImg + ')',        });      show(getBasicInfo());      $(window)        .scroll(function () {          let basicInfo = getBasicInfo();          show(basicInfo);          $(getThis)            .css({              'position': 'fixed',              'width': setting.scroWidth,              'top': setting.top,              'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',              'z-index': setting.z_index,              'background-color': setting.bgcolor,              "border-radius": setting.borderRadius,              'right': setting.right,              'background-image': 'url(' + setting.scImg + ')',              'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',              'background-size': 'contain'            });          $("#" + setting.nekoname)            .css({              'position': 'fixed',              'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',              'z-index': setting.z_index * 10,              'right': setting.right,              'background-image': 'url(' + setting.nekoImg + ')',            });          if (basicInfo.ScrollTop == basicInfo.S_V) {            $("#" + setting.nekoname)              .addClass("showMsg")          } else {            $("#" + setting.nekoname)              .removeClass("showMsg");            $("#" + setting.nekoname)              .attr("data-msg", setting.hoverMsg);          }        });      this.click(function (e) {        btf.scrollToDest(0, 500)      });      $("#" + setting.nekoname)        .click(function () {          btf.scrollToDest(0, 500)        });      return this;    }  })(jQuery);  $(document).ready(function () {    //部分自定义    $("#myscoll").nekoScroll({      bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效      borderRadius: '2em',      zoom: 0.9    }    );    //自定义（去掉以下注释，并注释掉其他的查看效果）    /*    $("#myscoll").nekoScroll({        nekoname:'neko1', //nekoname，相当于id        nekoImg:'img/猫咪.png', //neko的背景图片        scImg:"img/绳1.png", //绳子的背景图片        bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效        zoom:0.9, //绳子长度的缩放值        hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息        right:'100px', //距离页面右边的距离        fontFamily:'楷体', //对话框字体        fontSize:'14px', //对话框字体的大小        color:'#1e90ff', //对话框字体颜色        scroWidth:'8px', //绳子的宽度        z_index:100, //不用解释了吧        during:1200, //从顶部到底部滑动的时长    });    */  })}/* 小猫咪 end *///----------------------------------------------------------------/* 右键菜单 start */function setMask() {  //设置遮罩  if (document.getElementsByClassName("rmMask")[0] != undefined)    return document.getElementsByClassName("rmMask")[0];  mask = document.createElement('div');  mask.className = "rmMask";  mask.style.width = window.innerWidth + 'px';  mask.style.height = window.innerHeight + 'px';  mask.style.background = '#fff';  mask.style.opacity = '.0';  mask.style.position = 'fixed';  mask.style.top = '0';  mask.style.left = '0';  mask.style.zIndex = 998;  document.body.appendChild(mask);  document.getElementById("rightMenu").style.zIndex = 19198;  return mask;}function insertAtCursor(myField, myValue) {  //IE 浏览器  if (document.selection) {    myField.focus();    sel = document.selection.createRange();    sel.text = myValue;    sel.select();  }  //FireFox、Chrome等  else if (myField.selectionStart || myField.selectionStart == '0') {    var startPos = myField.selectionStart;    var endPos = myField.selectionEnd;    // 保存滚动条    var restoreTop = myField.scrollTop;    myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);    if (restoreTop > 0) {      myField.scrollTop = restoreTop;    }    myField.focus();    myField.selectionStart = startPos + myValue.length;    myField.selectionEnd = startPos + myValue.length;  } else {    myField.value += myValue;    myField.focus();  }}let rmf = {};rmf.showRightMenu = function (isTrue, x = 0, y = 0) {  let $rightMenu = $('#rightMenu');  $rightMenu.css('top', x + 'px').css('left', y + 'px');  if (isTrue) {    $rightMenu.show();  } else {    $rightMenu.hide();  }}rmf.copyWordsLink = function () {  let url = window.location.href  let txa = document.createElement("textarea");  txa.value = url;  document.body.appendChild(txa)  txa.select();  document.execCommand("Copy");  document.body.removeChild(txa);}rmf.switchReadMode = function () {  const $body = document.body  $body.classList.add('read-mode')  const newEle = document.createElement('button')  newEle.type = 'button'  newEle.className = 'fas fa-sign-out-alt exit-readmode'  $body.appendChild(newEle)  function clickFn() {    $body.classList.remove('read-mode')    newEle.remove()    newEle.removeEventListener('click', clickFn)  }  newEle.addEventListener('click', clickFn)}//复制选中文字rmf.copySelect = function () {  document.execCommand('Copy', false, null);}//回到顶部rmf.scrollToTop = function () {  document.getElementsByClassName("menus_items")[1].setAttribute("style", "");  document.getElementById("name-container").setAttribute("style", "display:none");  btf.scrollToDest(0, 500);}document.body.addEventListener('touchmove', function () {}, { passive: false });function popupMenu() {  window.oncontextmenu = function (event) {    // if (event.ctrlKey) return true;    // 当关掉自定义右键时候直接返回    if (mouseMode == "off") return true;    $('.rightMenu-group.hide').hide();    if (document.getSelection().toString()) {      $('#menu-text').show();    }    if (document.getElementById('post')) {      $('#menu-post').show();    } else {      if (document.getElementById('page')) {        $('#menu-post').show();      }    }    var el = window.document.body;    el = event.target;    var a = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\*\+,;=.]+$/    if (a.test(window.getSelection().toString()) && el.tagName != "A") {      $('#menu-too').show()    }    if (el.tagName == 'A') {      $('#menu-to').show()      rmf.open = function () {        if (el.href.indexOf("http://") == -1 && el.href.indexOf("https://") == -1 || el.href.indexOf("yisous.xyz") != -1) {          pjax.loadUrl(el.href)        }        else {          location.href = el.href        }      }      rmf.openWithNewTab = function () {        window.open(el.href);        // window.location.reload();      }      rmf.copyLink = function () {        let url = el.href        let txa = document.createElement("textarea");        txa.value = url;        document.body.appendChild(txa)        txa.select();        document.execCommand("Copy");        document.body.removeChild(txa);      }    } else if (el.tagName == 'IMG') {      $('#menu-img').show()      rmf.openWithNewTab = function () {        window.open(el.src);        // window.location.reload();      }      rmf.click = function () {        el.click()      }      rmf.copyLink = function () {        let url = el.src        let txa = document.createElement("textarea");        txa.value = url;        document.body.appendChild(txa)        txa.select();        document.execCommand("Copy");        document.body.removeChild(txa);      }      rmf.saveAs = function () {        var a = document.createElement('a');        var url = el.src;        var filename = url.split("/")[-1];        a.href = url;        a.download = filename;        a.click();        window.URL.revokeObjectURL(url);      }    } else if (el.tagName == "TEXTAREA" || el.tagName == "INPUT") {      $('#menu-paste').show();      rmf.paste = function () {        navigator.permissions          .query({            name: 'clipboard-read'          })          .then(result => {            if (result.state == 'granted' || result.state == 'prompt') {              //读取剪贴板              navigator.clipboard.readText().then(text => {                console.log(text)                insertAtCursor(el, text)              })            } else {              Snackbar.show({                text: '请允许读取剪贴板！',                pos: 'top-center',                showAction: false,              })            }          })      }    }    let pageX = event.clientX + 10;    let pageY = event.clientY;    let rmWidth = $('#rightMenu').width();    let rmHeight = $('#rightMenu').height();    if (pageX + rmWidth > window.innerWidth) {      pageX -= rmWidth + 10;    }    if (pageY + rmHeight > window.innerHeight) {      pageY -= pageY + rmHeight - window.innerHeight;    }    mask = setMask();    // 滚动消失的代码和阅读进度有冲突，因此放到readPercent.js里面了    $(".rightMenu-item").click(() => {      $('.rmMask').attr('style', 'display: none');    })    $(window).resize(() => {      rmf.showRightMenu(false);      $('.rmMask').attr('style', 'display: none');    })    mask.onclick = () => {      $('.rmMask').attr('style', 'display: none');    }    rmf.showRightMenu(true, pageY, pageX);    $('.rmMask').attr('style', 'display: flex');    return false;  };  window.addEventListener('click', function () {    rmf.showRightMenu(false);  });}if (!(navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {  popupMenu()}const box = document.documentElementfunction addLongtabListener(target, callback) {  let timer = 0 // 初始化timer  target.ontouchstart = () => {    timer = 0 // 重置timer    timer = setTimeout(() => {      callback();      timer = 0    }, 380) // 超时器能成功执行，说明是长按  }  target.ontouchmove = () => {    clearTimeout(timer) // 如果来到这里，说明是滑动    timer = 0  }  target.ontouchend = () => { // 到这里如果timer有值，说明此触摸时间不足380ms，是点击    if (timer) {      clearTimeout(timer)    }  }}addLongtabListener(box, popupMenu)// 全屏rmf.fullScreen = function () {  if (document.fullscreenElement) document.exitFullscreen();  else document.documentElement.requestFullscreen();}// 右键开关if (localStorage.getItem("mouse") == undefined) {  localStorage.setItem("mouse", "on");}var mouseMode = localStorage.getItem("mouse");function changeMouseMode() {  if (localStorage.getItem("mouse") == "on") {    mouseMode = "off";    localStorage.setItem("mouse", "off");    debounce(function () {      new Vue({        data: function () {          this.$notify({            title: "切换右键模式成功🍔",            message: "当前鼠标右键已恢复为系统默认！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 300);  } else {    mouseMode = "on";    localStorage.setItem("mouse", "on");    debounce(function () {      new Vue({        data: function () {          this.$notify({            title: "切换右键模式成功🍔",            message: "当前鼠标右键已更换为网站指定样式！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 300);  }}/* 右键菜单 end *///----------------------------------------------------------------/* 控制台输出字符画 start */var now1 = new Date();function createtime1() {  var grt = new Date("06/20/2023 00:00:00"); //此处修改你的建站时间或者网站上线时间  now1.setTime(now1.getTime() + 250);  var days = (now1 - grt) / 1000 / 60 / 60 / 24;  var dnum = Math.floor(days);  var ascll = [    `欢迎来到雨打窗前🌧️の小家!`,    `和我一起看窗外雨打芭蕉吧🌧️🏡🌧️`,    `        ███████╗███████╗██╗  ██╗██╗     ███╗   ███╗██╗   ██╗    ╚══███╔╝██╔════╝██║  ██║██║     ████╗ ████║╚██╗ ██╔╝      ███╔╝ ███████╗███████║██║     ██╔████╔██║ ╚████╔╝      ███╔╝  ╚════██║██╔══██║██║     ██║╚██╔╝██║  ╚██╔╝      ███████╗███████║██║  ██║███████╗██║ ╚═╝ ██║   ██║       ╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝   ╚═╝                                                                                                          `,    "小站已经苟活",    dnum,    "天啦!",    "©2022 By zshlmy",  ];  setTimeout(    console.log.bind(      console,      `\n%c${ascll[0]} %c ${ascll[1]} %c ${ascll[2]} %c${ascll[3]}%c ${ascll[4]}%c ${ascll[5]}\n\n%c ${ascll[6]}\n`,      "color:#39c5bb",      "",      "color:#39c5bb",      "color:#39c5bb",      "",      "color:#39c5bb",      ""    )  );}createtime1();function createtime2() {  var ascll2 = [`NCC2-036`, `调用前置摄像头拍照成功，识别为「大聪明」`, `Photo captured: `, ` 🤪 `];  setTimeout(    console.log.bind(      console,      `%c ${ascll2[0]} %c ${ascll2[1]} %c \n${ascll2[2]} %c\n${ascll2[3]}`,      "color:white; background-color:#10bcc0",      "",      "",      'background:url("https://unpkg.zhimg.com/anzhiyu-assets@latest/image/common/tinggge.gif") no-repeat;font-size:450%'    )  );  setTimeout(console.log.bind(console, "%c WELCOME %c 欢迎光临，大聪明", "color:white; background-color:#23c682", ""));  setTimeout(    console.warn.bind(      console,      "%c ⚡ Powered by 雨打窗前🌧️ %c 你正在访问雨打窗前🌧️の小家",      "color:white; background-color:#f0ad4e",      ""    )  );  setTimeout(console.log.bind(console, "%c W23-12 %c 系统监测到你已打开控制台", "color:white; background-color:#4f90d9", ""));  setTimeout(    console.warn.bind(console, "%c S013-782 %c 你现在正处于监控中", "color:white; background-color:#d9534f", "")  );}createtime2();// 重写console方法console.log = function () { };console.error = function () { };console.warn = function () { };/* 控制台输出字符画 end *///----------------------------------------------------------------/* 夜间模式切换动画 start */function switchNightMode() {  document.querySelector('body').insertAdjacentHTML('beforeend', '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"><div id="sun"></div><div id="moon"></div></div></div>'),    setTimeout(function () {      document.querySelector('body').classList.contains('DarkMode') ? (document.querySelector('body').classList.remove('DarkMode'), localStorage.setItem('isDark', '0'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')) : (document.querySelector('body').classList.add('DarkMode'), localStorage.setItem('isDark', '1'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')),        setTimeout(function () {          document.getElementsByClassName('Cuteen_DarkSky')[0].style.transition = 'opacity 3s';          document.getElementsByClassName('Cuteen_DarkSky')[0].style.opacity = '0';          setTimeout(function () {            document.getElementsByClassName('Cuteen_DarkSky')[0].remove();          }, 1e3);        }, 2e3)    })  const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'  if (nowMode === 'light') {    // 先设置太阳月亮透明度    document.getElementById("sun").style.opacity = "1";    document.getElementById("moon").style.opacity = "0";    setTimeout(function () {      document.getElementById("sun").style.opacity = "0";      document.getElementById("moon").style.opacity = "1";    }, 1000);    activateDarkMode()    saveToLocal.set('theme', 'dark', 2)    // GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)    document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')    // 延时弹窗提醒    setTimeout(() => {      new Vue({        data: function () {          this.$notify({            title: "关灯啦🌙",            message: "当前已成功切换至夜间模式！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 2000)  } else {    // 先设置太阳月亮透明度    document.getElementById("sun").style.opacity = "0";    document.getElementById("moon").style.opacity = "1";    setTimeout(function () {      document.getElementById("sun").style.opacity = "1";      document.getElementById("moon").style.opacity = "0";    }, 1000);    activateLightMode()    saveToLocal.set('theme', 'light', 2)    document.querySelector('body').classList.add('DarkMode'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')    setTimeout(() => {      new Vue({        data: function () {          this.$notify({            title: "开灯啦🌞",            message: "当前已成功切换至白天模式！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 2000)  }  // handle some cases  typeof utterancesTheme === 'function' && utterancesTheme()  typeof FB === 'object' && window.loadFBComment()  window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200)}/* 夜间模式切换动画 end *///----------------------------------------------------------------/* 分享按钮 start */// 分享本页function share_() {  let url = window.location.origin + window.location.pathname  try {    // 截取标题    var title = document.title;    var subTitle = title.endsWith("| 雨打窗前🌧️") ? title.substring(0, title.length - 14) : title;    navigator.clipboard.writeText('雨打窗前🌧️的站内分享\n标题：' + subTitle + '\n链接：' + url + '\n欢迎来访！🍭🍭🍭');    new Vue({      data: function () {        this.$notify({          title: "成功复制分享信息🎉",          message: "您现在可以通过粘贴直接跟小伙伴分享了！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 5000        });        // return { visible: false }      }    })  } catch (err) {    console.error('复制失败！', err);  }  // new ClipboardJS(".share", { text: function () { return '标题：' + document.title + '\n链接：' + url } });  // btf.snackbarShow("本页链接已复制到剪切板，快去分享吧~")}// 防抖function share() {  debounce(share_, 300);}/* 分享按钮 end *///----------------------------------------------------------------/* 恶搞标题 start *///动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '☔快进来躲雨~';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '🌂伞就放一边吧~';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});/* 恶搞标题 end *///----------------------------------------------------------------/* 农历转换 start *//*** @1900-2100区间内的公历、农历互转* @charset UTF-8* @Author  jiangjiazhi* @公历转农历：calendar.solar2lunar(1987,11,01); //[you can ignore params of prefix 0]* @农历转公历：calendar.lunar2solar(1987,09,10); //[you can ignore params of prefix 0]*//*** 农历1900-2100的润大小信息表* @Array Of Property* @return Hex*/var lunarInfo = [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, // 1900-1909  0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, // 1910-1919  0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, // 1920-1929  0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, // 1930-1939  0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, // 1940-1949  0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, // 1950-1959  0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, // 1960-1969  0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, // 1970-1979  0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, // 1980-1989  0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x05ac0, 0x0ab60, 0x096d5, 0x092e0, // 1990-1999  0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, // 2000-2009  0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, // 2010-2019  0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, // 2020-2029  0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, // 2030-2039  0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, // 2040-2049  0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0, // 2050-2059  0x0a2e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4, // 2060-2069  0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0, // 2070-2079  0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160, // 2080-2089  0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252, // 2090-2099  0x0d520] // 2100var solarMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]/*** 天干地支之天干速查表* @Array Of Property trans['甲','乙','丙','丁','戊','己','庚','辛','壬','癸']* @return Cn string*/var Gan = ['\u7532', '\u4e59', '\u4e19', '\u4e01', '\u620a', '\u5df1', '\u5e9a', '\u8f9b', '\u58ec', '\u7678']/*** 天干地支之地支速查表* @Array Of Property* @trans['子','丑','寅','卯','辰','巳','午','未','申','酉','戌','亥']* @return Cn string*/var Zhi = ['\u5b50', '\u4e11', '\u5bc5', '\u536f', '\u8fb0', '\u5df3', '\u5348', '\u672a', '\u7533', '\u9149', '\u620c', '\u4ea5']/*** 天干地支之地支速查表<=>生肖* @Array Of Property* @trans['鼠','牛','虎','兔','龙','蛇','马','羊','猴','鸡','狗','猪']* @return Cn string*/var Animals = ['\u9f20', '\u725b', '\u864e', '\u5154', '\u9f99', '\u86c7', '\u9a6c', '\u7f8a', '\u7334', '\u9e21', '\u72d7', '\u732a']/*** 24节气速查表* @Array Of Property* @trans['小寒','大寒','立春','雨水','惊蛰','春分','清明','谷雨','立夏','小满','芒种','夏至','小暑','大暑','立秋','处暑','白露','秋分','寒露','霜降','立冬','小雪','大雪','冬至']* @return Cn string*/var solarTerm = ['\u5c0f\u5bd2', '\u5927\u5bd2', '\u7acb\u6625', '\u96e8\u6c34', '\u60ca\u86f0', '\u6625\u5206', '\u6e05\u660e', '\u8c37\u96e8', '\u7acb\u590f', '\u5c0f\u6ee1', '\u8292\u79cd', '\u590f\u81f3', '\u5c0f\u6691', '\u5927\u6691', '\u7acb\u79cb', '\u5904\u6691', '\u767d\u9732', '\u79cb\u5206', '\u5bd2\u9732', '\u971c\u964d', '\u7acb\u51ac', '\u5c0f\u96ea', '\u5927\u96ea', '\u51ac\u81f3']/*** 1900-2100各年的24节气日期速查表* @Array Of Property* @return 0x string For splice*/var sTermInfo = ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f',  '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f',  'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f',  '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa',  '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2',  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f',  '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722',  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f',  '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722',  '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f',  '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',  '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722',  '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',  '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',  '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',  '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',  '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',  '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721',  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2',  '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd',  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',  '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd',  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',  '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721',  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5',  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722',  '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35',  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd',  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35',  '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721',  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5',  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35',  '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35',  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722']/** * 数字转中文速查表* @Array Of Property* @trans ['日','一','二','三','四','五','六','七','八','九','十']* @return Cn string */var nStr1 = ['\u65e5', '\u4e00', '\u4e8c', '\u4e09', '\u56db', '\u4e94', '\u516d', '\u4e03', '\u516b', '\u4e5d', '\u5341']/*** 日期转农历称呼速查表* @Array Of Property* @trans ['初','十','廿','卅']* @return Cn string*/var nStr2 = ['\u521d', '\u5341', '\u5eff', '\u5345']/*** 月份转农历称呼速查表* @Array Of Property* @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']* @return Cn string*/var nStr3 = ['\u6b63', '\u4e8c', '\u4e09', '\u56db', '\u4e94', '\u516d', '\u4e03', '\u516b', '\u4e5d', '\u5341', '\u51ac', '\u814a']/*** 返回农历y年一整年的总天数* @param lunar Year * @return Number* @eg:var count = calendar.lYearDays(1987) ;//count=387*/function lYearDays(y) {  var i  var sum = 348  for (i = 0x8000; i > 0x8; i >>= 1) { sum += (lunarInfo[y - 1900] & i) ? 1 : 0 }  return (sum + leapDays(y))}/*** 返回农历y年闰月是哪个月；若y年没有闰月 则返回0* @param lunar Year* @return Number (0-12) * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6*/function leapMonth(y) { // 闰字编码 \u95f0  return (lunarInfo[y - 1900] & 0xf)}/*** 返回农历y年闰月的天数 若该年没有闰月则返回0* @param lunar Year* @return Number (0、29、30)* @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29*/function leapDays(y) {  if (leapMonth(y)) {    return ((lunarInfo[y - 1900] & 0x10000) ? 30 : 29)  }  return (0)}/*** 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法* @param lunar Year* @return Number (-1、29、30) * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29*/function monthDays(y, m) {  if (m > 12 || m < 1) { return -1 }// 月份参数从1至12，参数错误返回-1  return ((lunarInfo[y - 1900] & (0x10000 >> m)) ? 30 : 29)}/*** 返回公历(!)y年m月的天数* @param solar Year* @return Number (-1、28、29、30、31)* @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30*/function solarDays(y, m) {  if (m > 12 || m < 1) { return -1 } // 若参数错误 返回-1  var ms = m - 1  if (ms === 1) { // 2月份的闰平规律测算后确认返回28或29    return (((y % 4 === 0) && (y % 100 !== 0) || (y % 400 === 0)) ? 29 : 28)  } else {    return (solarMonth[ms])  }}/*** 农历年份转换为干支纪年* @param  lYear 农历年的年份数* @return Cn string*/function toGanZhiYear(lYear) {  var ganKey = (lYear - 3) % 10  var zhiKey = (lYear - 3) % 12  if (ganKey === 0) ganKey = 10 // 如果余数为0则为最后一个天干  if (zhiKey === 0) zhiKey = 12 // 如果余数为0则为最后一个地支  return Gan[ganKey - 1] + Zhi[zhiKey - 1]}/*** 公历月、日判断所属星座* @param  cMonth [description]* @param  cDay [description]* @return Cn string*/function toAstro(cMonth, cDay) {  var s = '\u9b54\u7faf\u6c34\u74f6\u53cc\u9c7c\u767d\u7f8a\u91d1\u725b\u53cc\u5b50\u5de8\u87f9\u72ee\u5b50\u5904\u5973\u5929\u79e4\u5929\u874e\u5c04\u624b\u9b54\u7faf'  var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22]  return s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + '\u5ea7' // 座}/*** 传入offset偏移量返回干支* @param offset 相对甲子的偏移量* @return Cn string*/function toGanZhi(offset) {  return Gan[offset % 10] + Zhi[offset % 12]}/*** 传入公历(!)y年获得该年第n个节气的公历日期* @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起* @return day Number* @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春*/function getTerm(y, n) {  if (y < 1900 || y > 2100) { return -1 }  if (n < 1 || n > 24) { return -1 }  var _table = sTermInfo[y - 1900]  var _info = [    parseInt('0x' + _table.substr(0, 5)).toString(),    parseInt('0x' + _table.substr(5, 5)).toString(),    parseInt('0x' + _table.substr(10, 5)).toString(),    parseInt('0x' + _table.substr(15, 5)).toString(),    parseInt('0x' + _table.substr(20, 5)).toString(),    parseInt('0x' + _table.substr(25, 5)).toString()  ]  var _calday = [    _info[0].substr(0, 1),    _info[0].substr(1, 2),    _info[0].substr(3, 1),    _info[0].substr(4, 2),    _info[1].substr(0, 1),    _info[1].substr(1, 2),    _info[1].substr(3, 1),    _info[1].substr(4, 2),    _info[2].substr(0, 1),    _info[2].substr(1, 2),    _info[2].substr(3, 1),    _info[2].substr(4, 2),    _info[3].substr(0, 1),    _info[3].substr(1, 2),    _info[3].substr(3, 1),    _info[3].substr(4, 2),    _info[4].substr(0, 1),    _info[4].substr(1, 2),    _info[4].substr(3, 1),    _info[4].substr(4, 2),    _info[5].substr(0, 1),    _info[5].substr(1, 2),    _info[5].substr(3, 1),    _info[5].substr(4, 2)  ]  return parseInt(_calday[n - 1])}/*** 传入农历数字月份返回汉语通俗表示法* @param lunar month* @return Cn string* @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'*/function toChinaMonth(m) { // 月 => \u6708  if (m > 12 || m < 1) { return -1 } // 若参数错误 返回-1  var s = nStr3[m - 1]  s += '\u6708' // 加上月字  return s}/*** 传入农历日期数字返回汉字表示法* @param lunar day* @return Cn string* @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'*/function toChinaDay(d) { // 日 => \u65e5  var s  switch (d) {    case 10:      s = '\u521d\u5341'      break    case 20:      s = '\u4e8c\u5341'      break    case 30:      s = '\u4e09\u5341'      break    default:      s = nStr2[Math.floor(d / 10)]      s += nStr1[d % 10]  }  return (s)}/*** 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”* @param y year* @return Cn string* @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'*/function getAnimal(y) {  return Animals[(y - 4) % 12]}/*** 传入阳历年月日获得详细的公历、农历object信息 <=>JSON* @param y  solar year* @param m  solar month* @param d  solar day* @return JSON object* @eg:console.log(calendar.solar2lunar(1987,11,01));*/function solar2lunar(y, m, d) { // 参数区间1900.1.31~2100.12.31  // 年份限定、上限  if (y < 1900 || y > 2100) {    return -1 // undefined转换为数字变为NaN  }  // 公历传参最下限  if (y === 1900 && m === 1 && d < 31) {    return -1  }  // 未传参  获得当天  var objDate = null  if (!y) {    objDate = new Date()  } else {    objDate = new Date(y, parseInt(m) - 1, d)  }  var i  var leap = 0  var temp = 0  // 修正ymd参数  y = objDate.getFullYear()  m = objDate.getMonth() + 1  d = objDate.getDate()  var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) / 86400000  for (i = 1900; i < 2101 && offset > 0; i++) {    temp = lYearDays(i)    offset -= temp  }  if (offset < 0) {    offset += temp; i--  }  // 是否今天  var isTodayObj = new Date()  var isToday = false  if (isTodayObj.getFullYear() === y && isTodayObj.getMonth() + 1 === m && isTodayObj.getDate() === d) {    isToday = true  }  // 星期几  var nWeek = objDate.getDay()  var cWeek = nStr1[nWeek]  // 数字表示周几顺应天朝周一开始的惯例  if (nWeek === 0) {    nWeek = 7  }  // 农历年  var year = i  leap = leapMonth(i) // 闰哪个月  var isLeap = false  // 效验闰月  for (i = 1; i < 13 && offset > 0; i++) {    // 闰月    if (leap > 0 && i === (leap + 1) && isLeap === false) {      --i      isLeap = true; temp = leapDays(year) // 计算农历闰月天数    } else {      temp = monthDays(year, i)// 计算农历普通月天数    }    // 解除闰月    if (isLeap === true && i === (leap + 1)) { isLeap = false }    offset -= temp  }  // 闰月导致数组下标重叠取反  if (offset === 0 && leap > 0 && i === leap + 1) {    if (isLeap) {      isLeap = false    } else {      isLeap = true; --i    }  }  if (offset < 0) {    offset += temp; --i  }  // 农历月  var month = i  // 农历日  var day = offset + 1  // 天干地支处理  var sm = m - 1  var gzY = toGanZhiYear(year)  // 当月的两个节气  // bugfix-2017-7-24 11:03:38 use lunar Year Param `y` Not `year`  var firstNode = getTerm(y, (m * 2 - 1)) // 返回当月「节」为几日开始  var secondNode = getTerm(y, (m * 2)) // 返回当月「节」为几日开始  // 依据12节气修正干支月  var gzM = toGanZhi((y - 1900) * 12 + m + 11)  if (d >= firstNode) {    gzM = toGanZhi((y - 1900) * 12 + m + 12)  }  // 传入的日期的节气与否  var isTerm = false  var Term = null  if (firstNode === d) {    isTerm = true    Term = solarTerm[m * 2 - 2]  }  if (secondNode === d) {    isTerm = true    Term = solarTerm[m * 2 - 1]  }  // 日柱 当月一日与 1900/1/1 相差天数  var dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10  var gzD = toGanZhi(dayCyclical + d - 1)  // 该日期所属的星座  var astro = toAstro(m, d)  return { 'lYear': year, 'lMonth': month, 'lDay': day, 'Animal': getAnimal(year), 'IMonthCn': (isLeap ? '\u95f0' : '') + toChinaMonth(month), 'IDayCn': toChinaDay(day), 'cYear': y, 'cMonth': m, 'cDay': d, 'gzYear': gzY, 'gzMonth': gzM, 'gzDay': gzD, 'isToday': isToday, 'isLeap': isLeap, 'nWeek': nWeek, 'ncWeek': '\u661f\u671f' + cWeek, 'isTerm': isTerm, 'Term': Term, 'astro': astro }}var calendarFormatter = {  // 传入阳历年月日获得详细的公历、农历object信息 <=>JSON  solar2lunar: function (y, m, d) { // 参数区间1900.1.31~2100.12.31    return solar2lunar(y, m, d)  },  /**  * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON  * @param y  lunar year  * @param m  lunar month  * @param d  lunar day  * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]  * @return JSON object  * @eg:console.log(calendar.lunar2solar(1987,9,10));  */  lunar2solar: function (y, m, d, isLeapMonth) { // 参数区间1900.1.31~2100.12.1    isLeapMonth = !!isLeapMonth    if (isLeapMonth && (leapMonth !== m)) { return -1 }// 传参要求计算该闰月公历 但该年得出的闰月与传参的月份并不同    if (y === 2100 && m === 12 && d > 1 || y === 1900 && m === 1 && d < 31) { return -1 } // 超出了最大极限值    var day = monthDays(y, m)    var _day = day    // bugFix 2016-9-25    // if month is leap, _day use leapDays method    if (isLeapMonth) {      _day = leapDays(y, m)    }    if (y < 1900 || y > 2100 || d > _day) { return -1 }// 参数合法性效验    // 计算农历的时间差    var offset = 0    for (var i = 1900; i < y; i++) {      offset += lYearDays(i)    }    var leap = 0    var isAdd = false    for (i = 1; i < m; i++) {      leap = leapMonth(y)      if (!isAdd) { // 处理闰月        if (leap <= i && leap > 0) {          offset += leapDays(y); isAdd = true        }      }      offset += monthDays(y, i)    }    // 转换闰月农历 需补充该年闰月的前一个月的时差    if (isLeapMonth) { offset += day }    // 1900年农历正月一日的公历时间为1900年1月30日0时0分0秒(该时间也是本农历的最开始起始点)    var stmap = Date.UTC(1900, 1, 30, 0, 0, 0)    var calObj = new Date((offset + d - 31) * 86400000 + stmap)    var cY = calObj.getUTCFullYear()    var cM = calObj.getUTCMonth() + 1    var cD = calObj.getUTCDate()    return solar2lunar(cY, cM, cD)  }}/* 农历转换 end *///----------------------------------------------------------------/* 节日弹窗 start */var d = new Date();m = d.getMonth() + 1;dd = d.getDate();y = d.getFullYear();// 公祭日if (m == 9 && dd == 18) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是九一八事变" + (y - 1931).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 7 && dd == 7) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是卢沟桥事变" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 12 && dd == 13) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是南京大屠杀" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 8 && dd == 14) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是世界慰安妇纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}// 节假日if (m == 10 && dd <= 3) {//国庆节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝祖国" + (y - 1949).toString() + "岁生日快乐！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 8 && dd == 15) {//搞来玩的，小日子投降  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("小日子已经投降" + (y - 1945).toString() + "年了😃");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 1 && dd == 1) {//元旦节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire(y.toString() + "年元旦快乐！🎉");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 3 && dd == 8) {//妇女节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("各位女神们，妇女节快乐！👩");    sessionStorage.setItem("isPopupWindow", "1");  }}l = ["非常抱歉，因为不可控原因，博客将于明天停止运营！", "好消息，日本没了！", "美国垮了，原因竟然是川普！", "微软垮了！", "你的电脑已经过载，建议立即关机！", "你知道吗？站长很喜欢你哦！", "一分钟有61秒哦", "你喜欢的人跟别人跑了！"]if (m == 4 && dd == 1) {//愚人节，随机谎话  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire(l[Math.floor(Math.random() * l.length)]);    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 5 && dd == 1) {//劳动节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("劳动节快乐\n为各行各业辛勤工作的人们致敬！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 5 && dd == 4) {//青年节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("青年节快乐\n青春不是回忆逝去,而是把握现在！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 5 && dd == 20) {//520  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今年是520情人节\n快和你喜欢的人一起过吧！💑");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 7 && dd == 1) {//建党节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝中国共产党" + (y - 1921).toString() + "岁生日快乐！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 9 && dd == 10) {//教师节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("各位老师们教师节快乐！👩‍🏫");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 12 && dd == 25) {//圣诞节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("圣诞节快乐！🎄");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 1 && dd == 27) {//站长生日  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝站长" + (y - 2001).toString() + "岁生日快乐！🌧️");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 6 && dd == 14) {//妍妍生日  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝妍妍宝贝" + (y - 2001).toString() + "岁生日快乐！🌸");    sessionStorage.setItem("isPopupWindow", "1");  }}//传统节日部分if ((y == 2023 && m == 4 && dd == 5) || (y == 2024 && m == 4 && dd == 4) || (y == 2025 && m == 4 && dd == 4)) {//清明节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("清明时节雨纷纷,一束鲜花祭故人💐");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((y == 2023 && m == 12 && dd == 22) || (y == 2024 && m == 12 && dd == 21) || (y == 2025 && m == 12 && dd == 21)) {//冬至  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("冬至快乐\n快吃上一碗热热的汤圆和饺子吧🧆");    sessionStorage.setItem("isPopupWindow", "1");  }}var lunar = calendarFormatter.solar2lunar();//农历采用汉字计算，防止出现闰月导致问题if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初六") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初五") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初四") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初三") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初二") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初一") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "三十") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "廿九")) {  //春节，本来只有大年三十到初六，但是有时候除夕是大年二十九，所以也加上了  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire(y.toString() + "年新年快乐\n🎊祝你心想事成，诸事顺利🎊");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "十五")) {  //元宵节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("元宵节快乐\n送你一个大大的灯笼🧅");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "五月" && lunar["IDayCn"] == "初五")) {  //端午节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("端午节快乐\n请你吃一条粽子🍙");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "七月" && lunar["IDayCn"] == "初七")) {  //七夕节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("七夕节快乐\n黄昏后,柳梢头,牛郎织女来碰头");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "八月" && lunar["IDayCn"] == "十五")) {  //中秋节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("中秋节快乐\n请你吃一块月饼🍪");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "九月" && lunar["IDayCn"] == "初九")) {  //重阳节  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("重阳节快乐\n独在异乡为异客，每逢佳节倍思亲");    sessionStorage.setItem("isPopupWindow", "1");  }}// 切换主题提醒// if (y == 2022 && m == 12 && (dd >= 18 && dd <= 20)) {//     if (sessionStorage.getItem("isPopupWindow") != "1") {//         Swal.fire("网站换成冬日限定主题啦⛄");//         sessionStorage.setItem("isPopupWindow", "1");//     }// }/* 节日弹窗 end *///----------------------------------------------------------------/* 听话鼠标 start */var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle2 = (el, attr) => {  try {    return window.getComputedStyle      ? window.getComputedStyle(el)[attr]      : el.currentStyle[attr];  } catch (e) { }  return "";};// 为了屏蔽异步加载导致无法读取颜色值，这里统一用哈希表预处理const map = new Map();map.set('red', "rgb(241, 71, 71)");map.set('orange', "rgb(241, 162, 71)");map.set('yellow', "rgb(241, 238, 71)")map.set('purple', "rgb(179, 71, 241)");map.set('blue', "rgb(102, 204, 255)");map.set('gray', "rgb(226, 226, 226)");map.set('green', "rgb(57, 197, 187)");map.set('whitegray', "rgb(241, 241, 241)");map.set('pink', "rgb(237, 112, 155)");map.set('black', "rgb(0, 0, 0)");map.set('darkblue', "rgb(97, 100, 159)");map.set('heoblue', "rgb(66, 90, 239)");class Cursor {  constructor() {    this.pos = { curr: null, prev: null };    this.pt = [];    this.create();    this.init();    this.render();  }  move(left, top) {    this.cursor.style["left"] = `${left}px`;    this.cursor.style["top"] = `${top}px`;  }  create() {    if (!this.cursor) {      this.cursor = document.createElement("div");      this.cursor.id = "cursor";      this.cursor.classList.add("hidden");      document.body.append(this.cursor);    }    var el = document.getElementsByTagName('*');    for (let i = 0; i < el.length; i++)      if (getStyle2(el[i], "cursor") == "pointer")        this.pt.push(el[i].outerHTML);    var colorVal = map.get(localStorage.getItem("themeColor"));    document.body.appendChild((this.scr = document.createElement("style")));    this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='` + colorVal + `'/></svg>") 4 4, auto}`;  }  refresh() {    this.scr.remove();    this.cursor.classList.remove("hover");    this.cursor.classList.remove("active");    this.pos = { curr: null, prev: null };    this.pt = [];    this.create();    this.init();    this.render();  }  init() {    document.onmouseover = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");    document.onmouseout = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");    document.onmousemove = e => { (this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = { x: e.clientX - 8, y: e.clientY - 8 }; this.cursor.classList.remove("hidden"); };    document.onmouseenter = e => this.cursor.classList.remove("hidden");    document.onmouseleave = e => this.cursor.classList.add("hidden");    document.onmousedown = e => this.cursor.classList.add("active");    document.onmouseup = e => this.cursor.classList.remove("active");  }  render() {    if (this.pos.prev) {      // 跟踪速度调节      this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);      this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);      this.move(this.pos.prev.x, this.pos.prev.y);    } else {      this.pos.prev = this.pos.curr;    }    requestAnimationFrame(() => this.render());  }}(() => {  CURSOR = new Cursor();  // 需要重新获取列表时，使用 CURSOR.refresh()})();/* 听话鼠标 end *///----------------------------------------------------------------/* 新年倒计时 start */// let newYearTimer = null;// var newYear = () => {//   clearTimeout(newYearTimer);//   if (!document.querySelector('#newYear')) return;//   // 新年时间戳 and 星期对象//   let newYear = new Date('2023-01-22 00:00:00').getTime() / 1000,//     week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }//   time();//   // 补零函数//   function nol(h) { return h > 9 ? h : '0' + h; };//   function time() {//     // 现在 时间对象//     let now = new Date();//     // 右下角 今天//     document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]//     // 现在与新年相差秒数//     let second = newYear - Math.round(now.getTime() / 1000);//     // 小于0则表示已经过年//     if (second < 0) {//       document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';//       document.querySelector('#newYear .newYear-time').innerHTML = '<span class="happyNewYear">新年快乐</p>';//     } else {//       // 大于0则还未过年//       document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'//       // 大于一天则直接渲染天数//       if (second > 86400) {//         document.querySelector('#newYear .newYear-time').innerHTML = `<span class="day">${Math.ceil(second / 86400)}<span class="unit">天</span></span>`//       } else {//         // 小于一天则使用时分秒计时。//         let h = nol(parseInt(second / 3600));//         second %= 3600;//         let m = nol(parseInt(second / 60));//         second %= 60;//         let s = nol(second);//         document.querySelector('#newYear .newYear-time').innerHTML = `<span class="time">${h}:${m}:${s}</span></span>`;//         // 计时//         newYearTimer = setTimeout(time, 1000);//       }//     }//   }//   // 元宝飘落//   jQuery(document).ready(function ($) {//     $('#newYear').wpSuperSnow({//       flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],//       totalFlakes: '100',//       zIndex: '999999',//       maxSize: '30',//       maxDuration: '20',//       useFlakeTrans: false//     });//   });// }// // Pjax适配：若没有开启Pjax这里直接是newYear()即可// // 开了Pjax的用以下两句// document.addEventListener('pjax:complete', newYear);// document.addEventListener('DOMContentLoaded', newYear);/* 新年倒计时 end *///----------------------------------------------------------------/* 页脚计时器 start */var now = new Date();function createtime() {  // 当前时间  now.setTime(now.getTime() + 1000);  var start = new Date("08/01/2022 00:00:00"); // 旅行者1号开始计算的时间  var dis = Math.trunc(23400000000 + ((now - start) / 1000) * 17); // 距离=秒数*速度 记住转换毫秒  var unit = (dis / 149600000).toFixed(6);  // 天文单位  // 网站诞生时间  var grt = new Date("06/20/2023 00:00:00");  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9    ? `<img class='boardsign' src='https://imgbed.zshlmy.love/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`    : `<img class='boardsign' src='https://imgbed.zshlmy.love/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`),  document.getElementById("workboard") &&    (document.getElementById("workboard").innerHTML = currentTimeHtml);}// 设置重复执行函数，周期1000mssetInterval(() => {  createtime();}, 1000);/*页脚计时器 end *///----------------------------------------------------------------/* fps检测 start */if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {  var rAF = function () {    return (      window.requestAnimationFrame ||      window.webkitRequestAnimationFrame ||      function (callback) {        window.setTimeout(callback, 1000 / 60);      }    );  }();  var frame = 0;  var allFrameCount = 0;  var lastTime = Date.now();  var lastFameTime = Date.now();  var loop = function () {    var now = Date.now();    var fs = (now - lastFameTime);    var fps = Math.round(1000 / fs);    lastFameTime = now;    // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS    allFrameCount++;    frame++;    if (now > 1000 + lastTime) {      var fps = Math.round((frame * 1000) / (now - lastTime));      if (fps <= 5) {        var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`      } else if (fps <= 15) {        var kd = `<span style="color:red">电竞级帧率😖</span>`      } else if (fps <= 25) {        var kd = `<span style="color:orange">有点难受😨</span>`      } else if (fps < 35) {        var kd = `<span style="color:#9338e6">不太流畅🙄</span>`      } else if (fps <= 45) {        var kd = `<span style="color:#08b7e4">还不错哦😁</span>`      } else {        var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`      }      document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;      frame = 0;      lastTime = now;    };    rAF(loop);  }  loop();} else {  document.getElementById("fps").style = "display:none!important"}/* fps检测 end *///----------------------------------------------------------------/* 美化模块 start */// 更新版本需要每个用户都恢复一次默认设置if (localStorage.getItem("reset_4") == undefined) {  localStorage.setItem("reset_4", "1");  // 清空之前的标记值  for (var i = 1; i <= 3; i++) {    localStorage.removeItem("reset_" + i);  }  clearItem();  setTimeout(function () {    new Vue({      data: function () {        this.$notify({          title: "提示🍒",          message: " (｡･∀･)ﾉﾞ由于网站部分设置项更新，当前已为您重置所有设置，祝您愉快！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 8000        });      }    })  }, 1500);}// 清除localStorage配置项function clearItem() {  localStorage.removeItem('blogbg');  localStorage.removeItem('universe');  localStorage.removeItem('blur');  localStorage.removeItem('fpson');  localStorage.removeItem('transNum');  localStorage.removeItem('blurRad');  localStorage.removeItem('font');  localStorage.removeItem('themeColor');  localStorage.removeItem('rs');  localStorage.removeItem('mouse');  localStorage.removeItem('light');  localStorage.removeItem('snow');}// 设置字体if (localStorage.getItem("font") == undefined) {  localStorage.setItem("font", "LXGW");}setFont(localStorage.getItem("font"));function setFont(n) {  localStorage.setItem("font", n)  if (n == "default") {    document.documentElement.style.setProperty('--global-font', '-apple-system');    document.body.style.fontFamily = "-apple-system, Consolas_1, BlinkMacSystemFont, 'Segoe UI' , 'Helvetica Neue' , Lato, Roboto, 'PingFang SC' , 'Microsoft JhengHei' , 'Microsoft YaHei' , sans-serif";  }  else {    document.documentElement.style.setProperty('--global-font', n);    document.body.style.fontFamily = "var(--global-font),-apple-system, IBM Plex Mono ,monosapce,'微软雅黑', sans-serif";  }  try { setFontBorder(); } catch (err) { };}// 设置字体选择框边界function setFontBorder() {  var curFont = localStorage.getItem("font");  var swfId = "swf_" + curFont;  document.getElementById(swfId).style.border = "2px solid var(--theme-color)";  Array.prototype.forEach.call(document.getElementsByClassName("swf"), function (ee) {    if (ee.id != swfId) ee.style.border = "2px solid var(--border-color)";  });}// 设置主题色if (localStorage.getItem("themeColor") == undefined) {  localStorage.setItem("themeColor", "green");}setColor(localStorage.getItem("themeColor"));function setColor(c) {  document.getElementById("themeColor").innerText = `:root{--theme-color:` + map.get(c) + ` !important}`;  localStorage.setItem("themeColor", c);  // 刷新鼠标颜色  CURSOR.refresh();  // 设置一个带有透明度的主题色，用于菜单栏的悬浮颜色  var theme_color = map.get(c);  var trans_theme_color = "rgba" + theme_color.substring(3, theme_color.length - 1) + ", 0.7)";  var high_trans_color = "rgba" + theme_color.substring(3, theme_color.length - 1) + ", 0.5)";  document.documentElement.style.setProperty("--text-bg-hover", trans_theme_color);  document.documentElement.style.setProperty("--high-trans-color", high_trans_color);}// 星空背景开关if (localStorage.getItem("universe") == undefined) {  localStorage.setItem("universe", "block");}setUniverse2(localStorage.getItem("universe"));function setUniverse2(c) {  document.getElementById("universe").style.display = c;  localStorage.setItem("universe", c);}function setUniverse() {  if (document.getElementById("universeSet").checked) {    setUniverse2("block");  } else {    setUniverse2("none");  }}// 雪花开关if (localStorage.getItem("snow") == undefined) {  localStorage.setItem("snow", "none");}document.getElementById("snow").style.display = localStorage.getItem("snow");function setSnow() {  if (document.getElementById("snowSet").checked) {    document.getElementById("snow").style.display = "block";    localStorage.setItem("snow", "block");  } else {    document.getElementById("snow").style.display = "none";    localStorage.setItem("snow", "none");  }}// 帧率监测开关if (localStorage.getItem("fpson") == undefined) {  localStorage.setItem("fpson", "1");}function fpssw() {  if (document.getElementById("fpson").checked) {    localStorage.setItem("fpson", "1");  } else {    localStorage.setItem("fpson", "0");  }  setTimeout(reload, 600);}// 刷新窗口function reload() {  window.location.reload();}// 侧边栏开关if (localStorage.getItem("rs") == undefined) {  localStorage.setItem("rs", "block");}if (localStorage.getItem("rs") == "block") {  document.getElementById("rightSide").innerText = `:root{--rightside-display: block}`;} else {  document.getElementById("rightSide").innerText = `:root{--rightside-display: none}`;}function toggleRightside() {  // 先设置localStorage变量  if (document.getElementById("rightSideSet").checked) {    localStorage.setItem("rs", "block");    document.getElementById("rightSide").innerText = `:root{--rightside-display: block}`;  } else {    localStorage.setItem("rs", "none");    document.getElementById("rightSide").innerText = `:root{--rightside-display: none}`;  }}// 透明度调节滑块if (localStorage.getItem("transNum") == undefined) {  localStorage.setItem("transNum", 95);}var curTransNum = localStorage.getItem("transNum");var curTransMini = curTransNum * 0.95;document.getElementById("transPercent").innerText = `:root{--trans-light: rgba(253, 253, 253, ${curTransNum}%) !important; --trans-dark: rgba(25, 25, 25, ${curTransNum}%) !important} `;function setTrans() {  var elem = document.getElementById("transSet");  var newTransNum = elem.value;  var target = document.querySelector('.transValue');  target.innerHTML = "透明度 (0%-100%): " + newTransNum + "%";  localStorage.setItem("transNum", newTransNum);  curTransMini = newTransNum * 0.95;  curTransNum = newTransNum;  // 更新当前透明度  document.querySelector('#rang_trans').style.width = curTransMini + "%";  document.getElementById("transPercent").innerText = `:root{--trans-light: rgba(253, 253, 253, ${newTransNum}%) !important; --trans-dark: rgba(25, 25, 25, ${newTransNum}%) !important} `;};// 模糊度调节滑块if (localStorage.getItem("blurRad") == undefined) {  localStorage.setItem("blurRad", 20);}var curBlur = localStorage.getItem("blurRad"); // 当前模糊半径var miniBlur = curBlur * 0.95;document.getElementById("blurNum").innerText = `:root{--blur-num: blur(${curBlur}px) saturate(120%) !important`;function setBlurNum() {  var elem = document.getElementById("blurSet");  var newBlur = elem.value;  var target = document.querySelector('.blurValue');  target.innerHTML = "模糊半径 (开启模糊生效 0px-100px): " + newBlur + "px";  localStorage.setItem("blurRad", newBlur);  curBlur = newBlur;  miniBlur = curBlur * 0.95;  // var max = elem.getAttribute("max");  document.querySelector('#rang_blur').style.width = miniBlur + "%";  document.getElementById("blurNum").innerText = `:root{--blur-num: blur(${curBlur}px) saturate(120%) !important`;};// 模糊效果开关if (localStorage.getItem("blur") == undefined) {  localStorage.setItem("blur", 0);}if (localStorage.getItem("blur") == 0) {  document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: none}`;} else {  document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: var(--blur-num)}`;}function setBlur() {  if (document.getElementById("blur").checked) {    localStorage.setItem("blur", 1);    document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: var(--blur-num)}`;  } else {    localStorage.setItem("blur", 0);    document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: none}`;  }}// 更换背景(原来Leonus的代码)// 存数据// name：命名 data：数据// function saveData(name, data) {//   localStorage.setItem(name, JSON.stringify({ time: Date.now(), data: data }));// }// 取数据// name：命名 time：过期时长,单位分钟,如传入30,即加载数据时如果超出30分钟返回0,否则返回数据// function loadData(name, time) {//   let d = JSON.parse(localStorage.getItem(name));//   // 过期或有错误返回 0 否则返回数据//   if (d) {//     let t = Date.now() - d.time;//     if (t < time * 60 * 1000 && t > -1) return d.data;//   }//   return 0;// }// 上面两个函数如果你有其他需要存取数据的功能，也可以直接使用// 读取背景// try {//   let data = loadData("blogbg", 1440);//   if (data) changeBg(data, 1);//   else localStorage.removeItem("blogbg");// } catch (error) {//   localStorage.removeItem("blogbg");// }// 切换背景函数// 此处的flag是为了每次读取时都重新存储一次,导致过期时间不稳定// 如果flag为0则存储,即设置背景. 为1则不存储,即每次加载自动读取背景.// function changeBg(s, flag) {//   let bg = document.getElementById("web_bg");//   if (s.charAt(0) == "#") {//     bg.style.backgroundColor = s;//     bg.style.backgroundImage = "none";//   } else {//     bg.style.backgroundImage = s//   };//   if (!flag) {//     saveData("blogbg", s);//   }// }// 切换自定义颜色var defineColor = localStorage.getItem("blogbg") && localStorage.getItem("blogbg").charAt(0) == '#' ? localStorage.getItem("blogbg") : '#F4D88A';function changeBgColor() {  changeBg(document.querySelector("#define_colors").value);}// 必应每日壁纸APIlet bingDayBg = screen.width <= 768 ? "url(https://bing.img.run/m.php)" : "url(https://bing.img.run/1920x1080.php)";// 必应历史壁纸APIlet bingHistoryBg = screen.width <= 768 ? "url(https://bing.img.run/rand_m.php)" : "url(https://bing.img.run/rand.php)";// EEE.DOGlet EEEDog = "url(https://api.yimian.xyz/img?type=moe&size=1920x1080)";// 随机美图cdn.seovx.comlet seovx = "url(https://cdn.seovx.com/?mom=302)";// picsum随机let picsum = "url(https://picsum.photos/1920/1080.webp)";// 小歪二次元// let waiDongman = "url(https://api.ixiaowai.cn/api/api.php)";//  小歪高清壁纸let waiBizhi = "url(https://api.ixiaowai.cn/gqapi/gqapi.php)";// 博天随机let btstu = "url(http://api.btstu.cn/sjbz/?lx=suiji)";// tuapi 动漫// let tuapi = "url(https://tuapi.eees.cc/api.php?category=dongman)";// unsplash随机 https://source.unsplash.com/random/1920x1080/daily (weekly)let unsplash = "url(https://source.unsplash.com/random/1920x1080/)";// 更换背景(自己的代码)if (localStorage.getItem("blogbg") != undefined) {  setBg(localStorage.getItem("blogbg"));} else {  document.getElementById("defineBg").innerText = `:root{    --default-bg: url(https://imgbed.zshlmy.love/picture/外面在下雨.jpg);    --darkmode-bg:url(https://imgbed.zshlmy.love/picture/午后的雨.jpg);    --mobileday-bg: url(https://imgbed.zshlmy.love/picture/移动端白天.png);    --mobilenight-bg: url(https://imgbed.zshlmy.love/picture/移动端黑夜.png);  }`;}// 切换背景主函数function changeBg(s) {  // 自定义颜色框  defineColor = s.charAt(0) == "#" ? s : '#F4D88A';  setBg(s);  localStorage.setItem("blogbg", s);}// 设置背景属性function setBg(s) {  document.getElementById("defineBg").innerText = `:root{    --default-bg: ${s};    --darkmode-bg: ${s};    --mobileday-bg: ${s};    --mobilenight-bg: ${s};  }`;}// 切换链接对应的背景(加入了链接检验与防抖)function getPicture() {  debounce(getPicture_, 300);}function getPicture_() {  checkImgExists(document.getElementById("pic-link").value).then(() => {    // 有效的图片链接    var link = "url(" + document.getElementById("pic-link").value + ")";    changeBg(link);    // 提示切换成功    new Vue({      data: function () {        this.$notify({          title: "可以啦🍨",          message: "切换自定义背景成功！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 5000        });      }    })  }).catch(() => {    // 无效的图片链接，提示无效    new Vue({      data: function () {        this.$notify({          title: "链接不对🤣",          message: "请输入有效的图片链接！",          position: 'top-left',          offset: 50,          showClose: true,          type: "warning",          duration: 5000        });      }    })  })}// 判断图片链接是否可用function checkImgExists(imgurl) {  return new Promise(function (resolve, reject) {    var ImgObj = new Image();    ImgObj.src = imgurl;    ImgObj.onload = function (res) {      resolve(res);    }    ImgObj.onerror = function (err) {      reject(err);    }  })}// 黑夜霓虹灯开关if (localStorage.getItem("light") == undefined) {  localStorage.setItem("light", "true");}// 这里要适配Pjaxdocument.addEventListener('pjax:complete', function () {  changeLight(localStorage.getItem("light") == "true" ? true : false)});document.addEventListener('DOMContentLoaded', function () {  changeLight(localStorage.getItem("light") == "true" ? true : false)});function setLight() {  if (document.getElementById("lightSet").checked) {    changeLight(true);    localStorage.setItem("light", "true");  } else {    changeLight(false);    localStorage.setItem("light", "false");  }}// 更换霓虹灯状态function changeLight(flag) {  if (document.getElementById("site-name"))    document.getElementById("site-name").style.animation = flag ? "light_15px 10s linear infinite" : "none";  if (document.getElementById("site-title"))    document.getElementById("site-title").style.animation = flag ? "light_15px 10s linear infinite" : "none";  if (document.getElementById("site-subtitle"))    document.getElementById("site-subtitle").style.animation = flag ? "light_10px 10s linear infinite" : "none";  if (document.getElementById("post-info"))    document.getElementById("post-info").style.animation = flag ? "light_5px 10s linear infinite" : "none";  document.getElementById("menu_shadow").innerText = flag ? `:root{--menu-shadow: 0 0 1px var(--theme-color);}` : `:root{--menu-shadow: none;}`;}// 解决开启Pjax的问题// function whenDOMReady() {//   try {//     let data = loadData('blogbg', 1440)//     if (data) changeBg_noWindow(data, 0)//     else localStorage.removeItem('blogbg');//   } catch (error) { localStorage.removeItem('blogbg'); }// }// whenDOMReady()// document.addEventListener("pjax:success", whenDOMReady)// 无弹窗提醒更换背景// function changeBg_noWindow(s, flag) {//   let bg = document.getElementById("web_bg");//   if (s.charAt(0) == "#") {//     bg.style.backgroundColor = s;//     bg.style.backgroundImage = "none";//   } else bg.style.backgroundImage = s;//   if (!flag) {//     saveData("blogbg", s);//   }// }// 创建窗口var winbox = "";function createWinbox() {  let div = document.createElement("div");  document.body.appendChild(div);  winbox = WinBox({    id: "meihuaBox",    index: 99,    title: "美化设置",    x: "left",    y: "center",    minwidth: "300px",    height: "60%",    // "#76c8f1"    background: 'var(--theme-color)',    onmaximize: () => {      div.innerHTML = `<style>body::-webkit-scrollbar {display: none;} div#meihuaBox {width: 100% !important;}</style>`;    },    onrestore: () => {      div.innerHTML = "";    },  });  winResize();  window.addEventListener("resize", winResize);  // 每一类我放了一个演示，直接往下复制粘贴 a标签 就可以，需要注意的是 函数里面的链接 冒号前面需要添加反斜杠\进行转义  winbox.body.innerHTML = `<div class="settings" style="display: block;"><div id="article-container" style="padding:12px;"><br><center><p><button onclick="reset()" style="background:linear-gradient(to right, #fc354c, #0abfbc);display:block;width:40%;padding:15px 0;border-radius:30px;color:white;font-size:1.1em;"><i class="fa-solid fa-arrows-rotate"></i>&nbsp;恢复默认设置</button></p></center><h2>一、显示偏好</h2><div class="transValue" style="font-weight:bold;padding-left:10px">透明度 (0%-100%): ${curTransNum}%</div><div class="range">  <input id="transSet" type="range" min="0" max="100" step="1" value=${curTransNum} oninput="setTrans()">  <p class="rang_width" id="rang_trans" style="width:${curTransMini}%"></p></div><div class="blurValue" style="font-weight:bold;padding-left:10px">模糊半径 (开启模糊生效 0px-100px): ${curBlur} px</div><div class="range">  <input id="blurSet" type="range" min="0" max="100" step="1" value="${curBlur}" oninput="setBlurNum()">  <p class="rang_width" id="rang_blur" style="width:${miniBlur}%"></p></div><div class="content" style="display:flex">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 星空特效 (夜间模式) </div><input type="checkbox" id="universeSet" onclick="setUniverse()">  <div class="content-text" style="font-weight:bold; padding-left:20px"> 霓虹灯 (夜间模式) </div><input type="checkbox" id="lightSet" onclick="setLight()"></div><div class="content" style="display:flex">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 模糊效果 (消耗性能) </div><input type="checkbox" id="blur" onclick="setBlur()">  <div class="content-text" style="font-weight:bold; padding-left:20px"> 侧边栏 (默认开) </div><input type="checkbox" id="rightSideSet" onclick="toggleRightside()"></div><div class="content" style="display:flex">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 帧率监测 (刷新生效) </div><input type="checkbox" id="fpson" onclick="fpssw()">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 雪花特效 (白天模式) </div><input type="checkbox" id="snowSet" onclick="setSnow()"></div><h2>二、字体设置</h2><div class="note warning modern"><p>非商免字体未经授权只能个人使用。本站为完全非商业、非盈利性质的网站，平时用于个人学习交流，如有侵权请联系站长删除，谢谢！ —— 致版权方</p></div><p id="swfs"><a class="swf" id="swf_ZhuZiAWan" href="javascript:;" rel="noopener external nofollow" style="font-family:'ZhuZiAWan'!important;color:black" onclick="setFont('ZhuZiAWan')">筑紫A丸标准体2.0</a><a class="swf" id="swf_HYTMR" href="javascript:;" rel="noopener external nofollow" style="font-family:'HYTMR'!important;color:black" onclick="setFont('HYTMR')">汉仪唐美人</a><a class="swf" id="swf_LXGW" href="javascript:;" rel="noopener external nofollow" style="font-family:'LXGW'!important;color:black" onclick="setFont('LXGW')">霞鹜文楷</a><a class="swf" id="swf_TTQHB" href="javascript:;" rel="noopener external nofollow" style="font-family:'TTQHB'!important;color:black" onclick="setFont('TTQHB')">甜甜圈海报</a><a class="swf" id="swf_YSHST" href="javascript:;" rel="noopener external nofollow" style="font-family:'YSHST'!important;color:black" onclick="setFont('YSHST')">优设好身体</a><a class="swf" id="swf_MiSans" href="javascript:;" rel="noopener external nofollow" style="font-family:'MiSans'!important;color:black" onclick="setFont('MiSans')">MiSans</a><a class="swf" id="swf_default" href="javascript:;" rel="noopener external nofollow" style="font-family:-apple-system, IBM Plex Mono ,monosapce,'微软雅黑', sans-serif;!important;color:black" onclick="setFont('default')">系统默认</a></p><h2>三、主题色设置</h2><div class="content" style="display:flex"><input type="radio" id="red" name="colors" value=" "        onclick="setColor('red')"><input type="radio" id="orange" name="colors" value=" "        onclick="setColor('orange')"><input type="radio" id="yellow" name="colors" value=" "        onclick="setColor('yellow')"><input type="radio" id="green" name="colors" value=" "        onclick="setColor('green')"><input type="radio" id="blue" name="colors" value=" "        onclick="setColor('blue')"><input type="radio" id="heoblue" name="colors" value=" "        onclick="setColor('heoblue')"><input type="radio" id="darkblue" name="colors" value=" "        onclick="setColor('darkblue')"><input type="radio" id="purple" name="colors" value=" "        onclick="setColor('purple')"><input type="radio" id="pink" name="colors" value=" "        onclick="setColor('pink')" checked="checked"><input type="radio" id="black" name="colors" value=" "        onclick="setColor('black')"><input type="radio" id="blackgray" name="colors" value=" "        onclick="setColor('blackgray')"></div><h2>四、背景设置</h2><center><button onclick="resetBg()" style="background:var(--theme-color);display:block;width:35%;padding:15px 0;border-radius:30px;color:white;"><i class="fa-solid fa-arrows-rotate"></i>&nbsp;恢复默认背景</button></center><h3>1. 二次元</h3><details class="folding-tag" cyan><summary> 查看二次元背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/home_bg.webp)" class="imgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/home_bg.webp)')"></a></div>              </div>            </details><h3>2. 风景</h3><details class="folding-tag" cyan><summary> 查看风景背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/fj1.webp)" class="imgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/fj1.webp)')"></a></div>              </div>            </details><h3>3. 萌宠</h3><details class="folding-tag" cyan><summary> 查看萌宠背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/mc1.webp)" class="imgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/mc1.webp)')"></a></div>              </div>            </details><h3>4. 渐变色</h3><details class="folding-tag" cyan><summary> 查看渐变色背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to right, #544a7d, #ffd452)" onclick="changeBg('linear-gradient(to right, #544a7d, #ffd452)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to bottom, #7f7fd5, #86a8e7, #91eae4)" onclick="changeBg('linear-gradient(to bottom, #7f7fd5, #86a8e7, #91eae4)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to left, #654ea3, #eaafc8)" onclick="changeBg('linear-gradient(to left, #654ea3, #eaafc8)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #feac5e, #c779d0, #4bc0c8)" onclick="changeBg('linear-gradient(to top, #feac5e, #c779d0, #4bc0c8)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #d3959b, #bfe6ba)" onclick="changeBg('linear-gradient(to top, #d3959b, #bfe6ba)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #8360c3, #2ebf91)" onclick="changeBg('linear-gradient(to top, #8360c3, #2ebf91)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #108dc7, #ef8e38)" onclick="changeBg('linear-gradient(to top, #108dc7, #ef8e38)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #355c7d, #6c5b7b, #c06c84)" onclick="changeBg('linear-gradient(to top, #355c7d, #6c5b7b, #c06c84)')"></a></div>              </div>            </details><h3>5. 纯色</h3><details class="folding-tag" cyan><summary> 查看纯色背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #ecb1b1" onclick="changeBg('#ecb1b1')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #d3ebac" onclick="changeBg('#d3ebac')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #ace9ce" onclick="changeBg('#ace9ce')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #c1ebea" onclick="changeBg('#c1ebea')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #dee7f1" onclick="changeBg('#dee7f1')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #e9e3f2" onclick="changeBg('#e9e3f2')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #f7eff5" onclick="changeBg('#f7eff5')"></a>  <input type="color" id="define_colors" href="javascript:;" rel="noopener external nofollow" class="box" autocomplete="on" value="${defineColor}" oninput="changeBgColor()"></input></div>              </div>            </details><h3>6. 适配手机</h3><details class="folding-tag" cyan><summary> 查看适配手机的背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/mb4.webp)" class="pimgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/mb4.webp)')"></a></div>              </div>            </details><h3>7. 壁纸API</h3><details class="folding-tag" cyan><summary> 查看壁纸API系列背景 </summary>              <div class='content'>              <div class="bgbox"><a id="bingDayBox" rel="noopener external nofollow" style="background-image: ${bingDayBg}" class="box apiBox" onclick="changeBg('${bingDayBg}')"></a><a id="bingHistoryBox" rel="noopener external nofollow" style="background-image: ${bingHistoryBg}" class="box apiBox" onclick="changeBg('${bingHistoryBg}')"></a><a id="EEEDogBox" rel="noopener external nofollow" style="background-image: ${EEEDog}" class="box apiBox" onclick="changeBg('${EEEDog}')"></a><a id="seovxBox" rel="noopener external nofollow" style="background-image: ${seovx}" class="box apiBox" onclick="changeBg('${seovx}')"></a><a id="picsumBox" rel="noopener external nofollow" style="background-image: ${picsum}" class="box apiBox" onclick="changeBg('${picsum}')"></a><a id="waiBizhiBox" rel="noopener external nofollow" style="background-image: ${waiBizhi}" class="box apiBox" onclick="changeBg('${waiBizhi}')"></a><a id="btstuBox" rel="noopener external nofollow" style="background-image: ${btstu}" class="box apiBox" onclick="changeBg('${btstu}')"></a><a id="unsplashBox" rel="noopener external nofollow" style="background-image: ${unsplash}" class="box apiBox" onclick="changeBg('${unsplash}')"></a></div>              </div>            </details><h3>8. 自定义背景</h3><details class="folding-tag" cyan><summary> 设置自定义背景 </summary>              <div class='content'>              <p><center><input type="text" id="pic-link" size="70%" maxlength="1000" placeholder="请输入有效的图片链接，如 https://source.fomal.cc/img/home_bg.webp"></center></p><p><center><button type="button" onclick="getPicture()" style="background:var(--theme-color);width:35%;padding: 5px 0px 7px 0px;border-radius:30px;color:white;line-height:2;">🌈切换背景🌈</button></center></p>              </div>            </details><br><center><div style="font-size:1.2em;color:var(--theme-color);font-weight:bold;">------ ( •̀ ω •́ )y 到底啦 ------</div></center><br></div></div>`;  // 打开小窗时候初始化  $("#" + localStorage.getItem("themeColor")).attr("checked", true);  if (localStorage.getItem("blur") == 1) {    document.getElementById("blur").checked = true;  } else {    document.getElementById("blur").checked = false;  }  if (localStorage.getItem("universe") == "block") {    document.getElementById("universeSet").checked = true;  } else if (localStorage.getItem("universe") == "none") {    document.getElementById("universeSet").checked = false;  }  if (localStorage.getItem("fpson") == "1") {    document.getElementById("fpson").checked = true;  } else {    document.getElementById("fpson").checked = false;  }  if (localStorage.getItem("rs") == "block") {    document.getElementById("rightSideSet").checked = true;  } else if (localStorage.getItem("rs") == "none") {    document.getElementById("rightSideSet").checked = false;  }  if (localStorage.getItem("light") == "true") {    document.getElementById("lightSet").checked = true;  } else {    document.getElementById("lightSet").checked = false;  }  setFontBorder();  if (localStorage.getItem("snow") == "block") {    document.getElementById("snowSet").checked = true;  } else if (localStorage.getItem("snow") == "none") {    document.getElementById("snowSet").checked = false;  }}// 恢复默认背景function resetBg() {  localStorage.removeItem('blogbg');  reload();}// 恢复默认设置并刷新页面function reset() {  clearItem();  reload();}// 适应窗口大小function winResize() {  try {    var offsetWid = document.documentElement.clientWidth;    if (offsetWid <= 768) {      winbox.resize(offsetWid * 0.95 + "px", "90%").move("center", "center");    } else {      winbox.resize(offsetWid * 0.6 + "px", "70%").move("center", "center");    }  } catch (err) {    // console.log("Pjax毒瘤抽风运行winResize方法🙄🙄🙄");  }}// 切换状态，窗口已创建则控制窗口显示和隐藏，没窗口则创建窗口function toggleWinbox() {  if (document.querySelector("#meihuaBox")) {    winbox.toggleClass("hide");  } else {    createWinbox();  };}/* 美化模块 end */]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/kslink.js"/>
      <url>/js/kslink.js</url>
      
        <content type="html"><![CDATA[var leonus = {    linkCom: e => {        var t = document.querySelector(".el-textarea__inner");        "bf" == e ? (t.value = "```yml\n", t.value += "- name: \n  link: \n  avatar: \n  descr: \n  siteshot: ", t.value += "\n```", t.setSelectionRange(15, 15)) : (t.value = "站点名称：\n站点地址：\n头像链接：\n站点描述：\n站点截图：", t.setSelectionRange(5, 5)), t.focus()    },    owoBig: () => {        if (!document.getElementById("post-comment") || document.body.clientWidth < 768) return;        let e = 1,            t = "",            o = document.createElement("div"),            n = document.querySelector("body");        o.id = "owo-big", n.appendChild(o), new MutationObserver((l => {            for (let a = 0; a < l.length; a++) {                let i = l[a].addedNodes,                    s = "";                if (2 == i.length && "OwO-body" == i[1].className) s = i[1];                else {                    if (1 != i.length || "tk-comment" != i[0].className) continue;                    s = i[0]                }                s.onmouseover = l => {                    e && ("OwO-body" == s.className && "IMG" == l.target.tagName || "tk-owo-emotion" == l.target.className) && (e = 0, t = setTimeout((() => {                        let e = 3 * l.path[0].clientHeight,                            t = 3 * l.path[0].clientWidth,                            a = l.x - l.offsetX - (t - l.path[0].clientWidth) / 2,                            i = l.y - l.offsetY;                        a + t > n.clientWidth && (a -= a + t - n.clientWidth + 10), a < 0 && (a = 10), o.style.cssText = `display:flex; height:${e}px; width:${t}px; left:${a}px; top:${i}px;`, o.innerHTML = `<img src="${l.target.src}">`                    }), 300))                }, s.onmouseout = () => {                    o.style.display = "none", e = 1, clearTimeout(t)                }            }        })).observe(document.getElementById("post-comment"), {            subtree: !0,            childList: !0        })    },};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>动画</title>
      <link href="/box/animation/index.html"/>
      <url>/box/animation/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>画廊</title>
      <link href="/box/gallery/index.html"/>
      <url>/box/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>网址导航</title>
      <link href="/box/nav/index.html"/>
      <url>/box/nav/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>游戏</title>
      <link href="/life/games/index.html"/>
      <url>/life/games/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>八音盒</title>
      <link href="/life/music/index.html"/>
      <url>/life/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>访客统计</title>
      <link href="/site/census/index.html"/>
      <url>/site/census/index.html</url>
      
        <content type="html"><![CDATA[<!-- 访问地图 --><div id="map-chart" style="border-radius: 8px; height: 600px; padding: 10px;"></div><!-- 访问趋势 --><div id="trends-chart" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 访问来源 --><div id="sources-chart" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>影院</title>
      <link href="/life/movies/index.html"/>
      <url>/life/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>旧时光</title>
      <link href="/site/time/index.html"/>
      <url>/site/time/index.html</url>
      
        <content type="html"><![CDATA[<div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>小站建设进程</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol><!-- timeline 2023-6-20--><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-20</p></div></div><div class='timeline-item-content'><ol><li>主题开源啦</li><li>个人博客上线</li></ol></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章统计</title>
      <link href="/site/echarts/index.html"/>
      <url>/site/echarts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/personal/about/index.html"/>
      <url>/personal/about/index.html</url>
      
        <content type="html"><![CDATA[<div class="note warning modern"><p><b>非商免字体、网图</b>等资源未经授权仅限个人使用，不得用于商业用途。本站平时仅用于交流和学习，如涉及侵权请联系站长删除对应资源，谢谢！ —— 致版权方</p></div><h2 id="0-网站自述视频🎬">0.网站自述视频🎬</h2><div class="about_page">  <div align=center class="aspect-ratio">      <iframe src="https://player.bilibili.com/player.html?aid=474023258&&page=1&as_wide=1&high_quality=1&danmaku=0"       scrolling="no"       border="0"       frameborder="no"       framespacing="0"       high_quality=1      danmaku=1       allowfullscreen="true">       </iframe>  </div></div><br>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>唠叨</title>
      <link href="/personal/bb/index.html"/>
      <url>/personal/bb/index.html</url>
      
        <content type="html"><![CDATA[<style>/* 哔哔页面 */#bibi button {  color: #fff;  border: 0;  margin: 20px auto;  border-radius: 0.3125rem;  display: block;  padding: 0 1rem;  height: 40px;  font-weight: 500;  text-align: center;  transition: all 0.5s ease-out;  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);  background-size: 1000% 1000%;  animation: Gradient 60s linear infinite;  outline: 0;}#bibi .bb-info {  font-weight: 700;  font-size: 22px;}#bibi .bb-card {  padding: 15px;  border-radius: 10px;  background: rgba(255, 255, 255, 0.1);  border: 1px solid #a5a5a5ee;  margin-top: 20px;  transition: all 0.25s;  user-select: none;  width: calc(48% - 7px);  margin: 10px;}@media screen and (max-width: 800px) {  #bibi .bb-card {  width: 100%;  }}#bibi .bb-card:hover {  box-shadow: 0 5px 10px 8px #07111b29;  transform: translateY(-3px);}#bibi .card-header {  display: flex;  align-items: center;}#bibi .card-header .avatar {  width: 32px;  height: 32px;  border-radius: 50%;  margin-right: 10px;  border-radius: 20px;  overflow: hidden;}#bibi .card-header svg {  height: 20px;  width: 20px;  margin-left: 5px;}#bibi .card-header .card-time {  font-size: 12px;  text-shadow: #d9d9d9 0 0 1px, #fffffb 0 0 1px, #fffffb 0 0 2px;  margin-left: 10px;}#bibi .card-content {  padding: 10px 0;  white-space: pre-wrap;}#bibi .card-footer {  display: flex;  padding-bottom: 10px;}#bibi .card-footer .card-label {  border-radius: 5px;  padding: 0 5px;  font-weight: 550;  border-radius: 5px;  box-shadow: inset 0 -1px 0 rgb(27 31 35 / 12%);  font-size: 14px;  user-select: none;  margin-right: 10px;}div#bb_loading img{  border-radius: 15px;}#bb-main {  display: flex;  flex-direction: row;  flex-wrap: wrap;  justify-content: flex-start;}</style><script src="/js/bibi.js"></script><div id="bibi"><div class="bb-info"></div><div id="bb-main"></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友人帐</title>
      <link href="/social/link/index.html"/>
      <url>/social/link/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="本站友链添加方式：">本站友链添加方式：</h2><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#link-1">🙋 butterfly-💭candy</button></li><li class="tab"><button type="button" data-href="#link-2">🥗Volantis</button></li><li class="tab"><button type="button" data-href="#link-3">🌴General</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="link-1"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">雨打窗前🌧️</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">https://www.fomal.cc/</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">https://www.fomal.cc/assets/avatar.webp</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">和我一起看窗外雨打芭蕉吧🌧️🏡🌧️</span></span><br><span class="line">  <span class="attr">siteshot:</span> <span class="string">https://source.fomal.cc/siteshot/www.fomal.cn.jpg</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;雨打窗前🌧️&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screenshot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://source.fomal.cc/siteshot/www.fomal.cn.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.fomal.cc/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.fomal.cc/assets/avatar.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和我一起看窗外雨打芭蕉吧🌧️🏡🌧️&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="string">&quot;雨打窗前🌧️&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><table><thead><tr><th>名称</th><th>数值</th></tr></thead><tbody><tr><td>站点名称</td><td>雨打窗前🌧️</td></tr><tr><td>站点截图</td><td><a href="https://source.fomal.cc/siteshot/www.fomal.cn.jpg">https://source.fomal.cc/siteshot/www.fomal.cn.jpg</a></td></tr><tr><td>站点链接</td><td><a href="https://www.fomal.cc/">https://www.fomal.cc/</a></td></tr><tr><td>站长头像</td><td><a href="https://www.fomal.cc/assets/avatar.webp">https://www.fomal.cc/assets/avatar.webp</a></td></tr><tr><td>站点描述</td><td>Future is now🍭🍭🍭</td></tr><tr><td>站点关键词</td><td>雨打窗前🌧️,个人博客,代码</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="加入本站友链方式">加入本站友链方式</h2><p>参照以下格式留言即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="comment">#站点名称</span></span><br><span class="line">  <span class="attr">link:</span> <span class="comment">#站点链接</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="comment">#站长头像</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="comment">#站点描述</span></span><br><span class="line">  <span class="attr">siteshot:</span> <span class="comment">#站点截图 </span></span><br></pre></td></tr></table></figure><p>站点截图可以自己提供，尺寸尽量不要大于 600*600，图片压缩后最好小于200KB。<br>未提供站点预览图的，本站会根据贵站链接调用以下 API 自动获取贵站的站点截图。<br>对于做了反扒措施的站点，API 获取的将是反扒页面，望知悉。<br>站点截图建议使用以下 API 获取以匹配本站样式<br>有部分朋友的截图体积过大影响加载速度，后面一律采用小体积截图代替望周知</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://image.thum.io/get/allowJPG/wait/20/width/600/crop/950/https://&lt;你的域名&gt;/</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>🎉本站支持交换友链，在您提出申请之前，请将本站添加至友链<br>🥗为了保障本站用户，本站仅支持个人网站的友链申请<br>🍧申请本站友链需要拥有独立域名（非免费域名），建议开启全站HTTPS<br>🥫如果友情链接已经添加，请保持网站的正常访问，会定期清理僵尸网站<br>🍖网站有一定的实质性内容和主题，不能是空壳网站和练手网站<br>💕感谢您对本站的支持，如果您已经满足上述要求，请在下方表单提交友链申请~~~</p></div><div class="addBtn"><button onclick="leonus.linkCom()"><i class="fa-solid fa-circle-plus"></i>快速申请 (默认样式)</button> <button onclick="leonus.linkCom(&quot;bf&quot;)"><i class="fa-solid fa-circle-plus"></i>快速申请 (Butterfly)</button></div><link rel="stylesheet" href="/css/kslink.css"><script src="/js/kslink.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>恋爱小屋</title>
      <link href="/personal/love/index.html"/>
      <url>/personal/love/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="337d190603a3565d030708f63fe0fa50d2931d71b9de89a53c787e1eb813e689">b156c00aff5e1fca16aa419e30140c01983ea163dcd28f52c2b1a39c0acec3f8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">这里记录我和女朋友的一些事情哦，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>朋友圈</title>
      <link href="/social/fcircle/index.html"/>
      <url>/social/fcircle/index.html</url>
      
        <content type="html"><![CDATA[<style>  #cf-container {    background: transparent !important;  }  .cf-article .cf-article-title:hover {    color: #f4f4f4 !important;  }  .cf-img-avatar {    opacity: .4 !important;  }  .cf-article-author:hover {    background: var(--theme-color) !important;  }  #cf-more:hover {    background: var(--theme-color) !important;  }  .cf-overshow p a:hover {    color: #f4f4f4 !important;  }  .cf-article {    transition: transform linear 0.3s;  }  .cf-article:hover {    transform: scale(1.05);    box-shadow: 0 5px 10px 8px #07111b29;  }  .cf-article {    border-radius: 15px !important;    border: 1px solid #a5a5a5ee !important;  }  ::selection {  background: var(--theme-color) !important;  color: #f4f4f4 !important;  }</style><div id="hexo-circle-of-friends-root"></div><script>    let UserConfig = {        // 替换为你的API!!!        private_api_url: 'https://fcircle.fomal.cc/',        // 点击加载更多时，一次最多加载几篇文章，默认10        page_turning_number: 12,        // 头像加载失败时，默认头像地址        error_img: '/assets/r1.jpg',        // 进入页面时第一次的排序规则        sort_rule: 'created'    }</script><link rel="stylesheet" href="https://cdn1.tianli0.top/gh/zhheo/JS-Heo@master/mainColor/heoMainColor.css"><script type="text/javascript" src="https://cdn1.tianli0.top/gh/zhheo/JS-Heo@master/moments5/app.min.js"></script><script type="text/javascript" src="https://cdn1.tianli0.top/gh/zhheo/JS-Heo@master/moments5/bundle.js"></script>]]></content>
      
    </entry>
    
    
  
</search>
